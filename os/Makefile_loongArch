# Building
TARGET := loongarch64-unknown-none-elf
MODE := release
KERNEL_ELF := target/$(TARGET)/$(MODE)/os
KERNEL_BIN := $(KERNEL_ELF).bin
DISASM_TMP := target/$(TARGET)/$(MODE)/asm
FS_IMG := ../user/target/$(TARGET)/$(MODE)/fs.img
APPS := ../user/src/bin/*
OFFLINE :=

# BOARD
BOARD := qemu-loongarch
SBI ?= rustsbi
BOOTLOADER := ../bootloader/$(SBI)-$(BOARD).bin

# KERNEL ENTRY
KERNEL_ENTRY_PA := 0x90200000

# Binutils
OBJDUMP := rust-objdump --arch-name=loongarch64
OBJCOPY := rust-objcopy --binary-architecture=loongarch64

# GDB Dashboard 支持
GDB_PATH := /opt/loongson/loongarch64-clfs-6.3-cross-tools-gcc-glibc/bin/loongarch64-unknown-linux-gnu-gdb
gdb := $(GDB_PATH)

# Building mode argument
ifeq ($(MODE), release)
    MODE_ARG := --release
endif

# 测试参数
CHAPTER ?= $(shell git rev-parse --abbrev-ref HEAD | sed -E 's/ch([0-9])/\1/')
TEST ?= 6
BASE ?= 1

# Disassembly
DISASM ?= -x

build: env $(KERNEL_BIN) fs-img

env:
ifeq ($(OFFLINE),)
    (rustup target list | grep "loongarch64-unknown-none-elf (installed)") || rustup target add $(TARGET)
    cargo install cargo-binutils
    rustup component add rust-src
    rustup component add llvm-tools-preview
endif

$(KERNEL_BIN): kernel
    @$(OBJCOPY) $(KERNEL_ELF) --strip-all -O binary $@

fs-img: $(APPS)
    @make -C ../user build TEST=$(TEST) CHAPTER=$(CHAPTER) BASE=$(BASE) TARGET=$(TARGET)
    @rm -f $(FS_IMG)
    @cd ../easy-fs-fuse && cargo run --release -- -s ../user/build/app/ -t ../user/target/$(TARGET)/release/

kernel:
    @make -C ../user build TEST=$(TEST) CHAPTER=$(CHAPTER) BASE=$(BASE) TARGET=$(TARGET)
    @echo Platform: $(BOARD)
    @cargo build $(MODE_ARG) --target $(TARGET)

clean:
    @cargo clean

disasm: kernel
    @$(OBJDUMP) $(DISASM) $(KERNEL_ELF) | less

disasm-vim: kernel
    @$(OBJDUMP) $(DISASM) $(KERNEL_ELF) > $(DISASM_TMP)
    @vim $(DISASM_TMP)
    @rm $(DISASM_TMP)

run: run-inner

run-inner: build
    @qemu-system-loongarch64 \
        -machine virt \
        -cpu la464 \
        -nographic \
        -m 128M \
        -kernel $(KERNEL_BIN) \
        -drive file=$(FS_IMG),if=none,format=raw,id=x0 \
        -device virtio-blk-device,drive=x0

gdb: build
    @tmux new-session -d \
        "qemu-system-loongarch64 -machine virt -cpu la464 -nographic -m 128M -kernel $(KERNEL_ELF) -s -S" && \
        tmux split-window -h \"$(gdb) -ex 'file $(KERNEL_ELF)' -ex 'set arch loongarch64' -ex 'target remote localhost:1234'\" && \
        tmux swap-pane -U && \
        tmux -2 attach-session -d

gdbserver: build
    @qemu-system-loongarch64 -machine virt -cpu la464 -nographic -m 128M -kernel $(KERNEL_ELF) \
        -drive file=$(FS_IMG),if=none,format=raw,id=x0 \
        -device virtio-blk-device,drive=x0 -s -S

gdbclient:
    @$(gdb) -ex 'file $(KERNEL_ELF)' -ex 'set arch loongarch64' -ex 'target remote localhost:1234'

.PHONY: build env kernel clean disasm disasm-vim run-inner fs-img gdbserver gdbclient