Platform: qemu
warning: `/home/ustc/.cargo/config` is deprecated in favor of `config.toml`
note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`
warning: unused manifest key: env
       Fresh unicode-ident v1.0.18
       Fresh memchr v2.7.4
       Fresh regex-syntax v0.8.5
       Fresh glob v0.3.2
       Fresh minimal-lexical v0.2.1
       Fresh proc-macro2 v1.0.95
       Fresh aho-corasick v1.1.3
       Fresh nom v7.1.3
       Fresh semver-parser v0.7.0
       Fresh quote v1.0.40
       Fresh regex-automata v0.4.9
       Fresh libloading v0.8.6
       Fresh libc v0.2.172
       Fresh either v1.15.0
       Fresh autocfg v1.4.0
       Fresh syn v2.0.101
       Fresh regex v1.11.1
       Fresh itertools v0.13.0
       Fresh clang-sys v1.8.1
       Fresh cexpr v0.6.0
       Fresh semver v0.9.0
       Fresh prettyplease v0.2.32
       Fresh shlex v1.3.0
       Fresh rustc-hash v2.1.1
       Fresh version_check v0.9.5
       Fresh rustc_version v0.2.3
       Fresh bindgen v0.71.1
       Fresh scopeguard v1.2.0
       Fresh once_cell v1.21.3
       Fresh log v0.4.27
       Fresh zerocopy-derive v0.7.35
       Fresh riscv-target v0.1.2
       Fresh lock_api v0.4.12
       Fresh byteorder v1.5.0
       Fresh crate_interface v0.1.4
       Fresh num_enum_derive v0.7.3
       Fresh spin v0.9.8
       Fresh ahash v0.7.8
       Fresh bare-metal v0.2.5
       Fresh zerocopy v0.7.35
       Fresh bitflags v1.3.2
       Fresh bitflags v2.9.0
       Fresh hashbrown v0.12.3
       Fresh spin v0.7.1
       Fresh zero v0.1.3
       Fresh bit_field v0.10.2
       Fresh cfg-if v1.0.0
       Fresh lazy_static v1.5.0
       Fresh lwext4_rust v0.2.0 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os/lwext4_rust)
warning: unused import: `alloc::string::String`
 --> lwext4_rust/src/ulibc.rs:3:5
  |
3 | use alloc::string::String;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `board_qemu`
   --> lwext4_rust/src/file.rs:412:19
    |
412 |             #[cfg(feature = "board_qemu")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default`, `print`, and `printf-compat`
    = help: consider adding `board_qemu` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused variable: `args`
  --> lwext4_rust/src/ulibc.rs:25:53
   |
25 | unsafe extern "C" fn printf(str: *const c_char, mut args: ...) -> c_int {
   |                                                     ^^^^ help: if this is intentional, prefix it with an underscore: `_args`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> lwext4_rust/src/ulibc.rs:25:49
   |
25 | unsafe extern "C" fn printf(str: *const c_char, mut args: ...) -> c_int {
   |                                                 ----^^^^
   |                                                 |
   |                                                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

       Fresh riscv v0.6.0 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os/riscv)
warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:9:27
   |
9  |                   #[cfg(all(riscv, feature = "inline-asm"))]
   |                             ^^^^^
...
28 | / instruction!(
29 | |     /// `EBREAK` instruction wrapper
30 | |     ///
31 | |     /// Generates a breakpoint exception.
32 | |     , ebreak, "ebreak", __ebreak);
   | |_________________________________- in this macro invocation
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:12:27
   |
12 |                   #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                             ^^^^^
...
28 | / instruction!(
29 | |     /// `EBREAK` instruction wrapper
30 | |     ///
31 | |     /// Generates a breakpoint exception.
32 | |     , ebreak, "ebreak", __ebreak);
   | |_________________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:21:27
   |
21 |                   #[cfg(not(riscv))]
   |                             ^^^^^
...
28 | / instruction!(
29 | |     /// `EBREAK` instruction wrapper
30 | |     ///
31 | |     /// Generates a breakpoint exception.
32 | |     , ebreak, "ebreak", __ebreak);
   | |_________________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:9:27
   |
9  |                   #[cfg(all(riscv, feature = "inline-asm"))]
   |                             ^^^^^
...
33 | / instruction!(
34 | |     /// `WFI` instruction wrapper
35 | |     ///
36 | |     /// Provides a hint to the implementation that the current hart ca...
37 | |     /// The WFI instruction is just a hint, and a legal implementation...
38 | |     , wfi, "wfi", __wfi);
   | |________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:12:27
   |
12 |                   #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                             ^^^^^
...
33 | / instruction!(
34 | |     /// `WFI` instruction wrapper
35 | |     ///
36 | |     /// Provides a hint to the implementation that the current hart ca...
37 | |     /// The WFI instruction is just a hint, and a legal implementation...
38 | |     , wfi, "wfi", __wfi);
   | |________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:21:27
   |
21 |                   #[cfg(not(riscv))]
   |                             ^^^^^
...
33 | / instruction!(
34 | |     /// `WFI` instruction wrapper
35 | |     ///
36 | |     /// Provides a hint to the implementation that the current hart ca...
37 | |     /// The WFI instruction is just a hint, and a legal implementation...
38 | |     , wfi, "wfi", __wfi);
   | |________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:9:27
   |
9  |                   #[cfg(all(riscv, feature = "inline-asm"))]
   |                             ^^^^^
...
39 | / instruction!(
40 | |     /// `SFENCE.VMA` instruction wrapper (all address spaces and page ...
41 | |     ///
42 | |     /// Synchronizes updates to in-memory memory-management data struc...
...  |
46 | |     /// `SFENCE.VMA` are ordered before all implicit references subseq...
47 | |     , sfence_vma_all, "sfence.vma", __sfence_vma_all);
   | |_____________________________________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:12:27
   |
12 |                   #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                             ^^^^^
...
39 | / instruction!(
40 | |     /// `SFENCE.VMA` instruction wrapper (all address spaces and page ...
41 | |     ///
42 | |     /// Synchronizes updates to in-memory memory-management data struc...
...  |
46 | |     /// `SFENCE.VMA` are ordered before all implicit references subseq...
47 | |     , sfence_vma_all, "sfence.vma", __sfence_vma_all);
   | |_____________________________________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:21:27
   |
21 |                   #[cfg(not(riscv))]
   |                             ^^^^^
...
39 | / instruction!(
40 | |     /// `SFENCE.VMA` instruction wrapper (all address spaces and page ...
41 | |     ///
42 | |     /// Synchronizes updates to in-memory memory-management data struc...
...  |
46 | |     /// `SFENCE.VMA` are ordered before all implicit references subseq...
47 | |     , sfence_vma_all, "sfence.vma", __sfence_vma_all);
   | |_____________________________________________________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `instruction` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:60:19
   |
60 |         #[cfg(all(riscv, feature = "inline-asm"))]
   |                   ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:63:19
   |
63 |         #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                   ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/asm.rs:72:19
   |
72 |         #[cfg(not(riscv))]
   |                   ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:88:31
    |
88  |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
135 |     instruction_hypervisor_extension!(RS1_RS2,,hfence_gvma,".word 1656029299",__hfence_gvm...
    |     ---------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:92:31
    |
92  |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
135 |     instruction_hypervisor_extension!(RS1_RS2,,hfence_gvma,".word 1656029299",__hfence_gvm...
    |     ---------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:101:31
    |
101 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
135 |     instruction_hypervisor_extension!(RS1_RS2,,hfence_gvma,".word 1656029299",__hfence_gvm...
    |     ---------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:88:31
    |
88  |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
136 |     instruction_hypervisor_extension!(RS1_RS2,,hfence_vvma,".word 582287475",__hfence_vvm...
    |     --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:92:31
    |
92  |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
136 |     instruction_hypervisor_extension!(RS1_RS2,,hfence_vvma,".word 582287475",__hfence_vvm...
    |     --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:101:31
    |
101 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
136 |     instruction_hypervisor_extension!(RS1_RS2,,hfence_vvma,".word 582287475",__hfence_vvm...
    |     --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
137 |     instruction_hypervisor_extension!(RS1_RD,,hlv_b,".word 1610958195",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
137 |     instruction_hypervisor_extension!(RS1_RD,,hlv_b,".word 1610958195",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
137 |     instruction_hypervisor_extension!(RS1_RD,,hlv_b,".word 1610958195",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
138 |     instruction_hypervisor_extension!(RS1_RD,,hlv_bu,".word 1612006771",__hlv_b...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
138 |     instruction_hypervisor_extension!(RS1_RD,,hlv_bu,".word 1612006771",__hlv_b...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
138 |     instruction_hypervisor_extension!(RS1_RD,,hlv_bu,".word 1612006771",__hlv_b...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
139 |     instruction_hypervisor_extension!(RS1_RD,,hlv_h,".word 1678067059",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
139 |     instruction_hypervisor_extension!(RS1_RD,,hlv_h,".word 1678067059",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
139 |     instruction_hypervisor_extension!(RS1_RD,,hlv_h,".word 1678067059",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
140 |     instruction_hypervisor_extension!(RS1_RD,,hlv_hu,".word 1679115635",__hlv_h...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
140 |     instruction_hypervisor_extension!(RS1_RD,,hlv_hu,".word 1679115635",__hlv_h...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
140 |     instruction_hypervisor_extension!(RS1_RD,,hlv_hu,".word 1679115635",__hlv_h...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
141 |     instruction_hypervisor_extension!(RS1_RD,,hlvx_hu,".word 1681212787",__hlvx_h...
    |     ------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
141 |     instruction_hypervisor_extension!(RS1_RD,,hlvx_hu,".word 1681212787",__hlvx_h...
    |     ------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
141 |     instruction_hypervisor_extension!(RS1_RD,,hlvx_hu,".word 1681212787",__hlvx_h...
    |     ------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
142 |     instruction_hypervisor_extension!(RS1_RD,,hlv_w,".word 1745175923",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
142 |     instruction_hypervisor_extension!(RS1_RD,,hlv_w,".word 1745175923",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
142 |     instruction_hypervisor_extension!(RS1_RD,,hlv_w,".word 1745175923",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
143 |     instruction_hypervisor_extension!(RS1_RD,,hlvx_wu,".word 1748321651",__hlvx_w...
    |     ------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
143 |     instruction_hypervisor_extension!(RS1_RD,,hlvx_wu,".word 1748321651",__hlvx_w...
    |     ------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
143 |     instruction_hypervisor_extension!(RS1_RD,,hlvx_wu,".word 1748321651",__hlvx_w...
    |     ------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:88:31
    |
88  |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
144 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_b,".word 1656045683",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:92:31
    |
92  |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
144 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_b,".word 1656045683",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:101:31
    |
101 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
144 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_b,".word 1656045683",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:88:31
    |
88  |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
145 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_h,".word 1723154547",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:92:31
    |
92  |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
145 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_h,".word 1723154547",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:101:31
    |
101 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
145 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_h,".word 1723154547",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:88:31
    |
88  |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
146 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_w,".word 1790263411",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:92:31
    |
92  |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
146 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_w,".word 1790263411",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:101:31
    |
101 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
146 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_w,".word 1790263411",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
147 |     instruction_hypervisor_extension!(RS1_RD,,hlv_wu,".word 1746224499",__hlv_w...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
147 |     instruction_hypervisor_extension!(RS1_RD,,hlv_wu,".word 1746224499",__hlv_w...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
147 |     instruction_hypervisor_extension!(RS1_RD,,hlv_wu,".word 1746224499",__hlv_w...
    |     ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:112:31
    |
112 |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
148 |     instruction_hypervisor_extension!(RS1_RD,,hlv_d,".word 1812284787",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:119:31
    |
119 |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
148 |     instruction_hypervisor_extension!(RS1_RD,,hlv_d,".word 1812284787",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:128:31
    |
128 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
148 |     instruction_hypervisor_extension!(RS1_RD,,hlv_d,".word 1812284787",__hlv_...
    |     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:88:31
    |
88  |                     #[cfg(all(riscv, feature = "inline-asm"))]
    |                               ^^^^^
...
149 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_d,".word 1857372275",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:92:31
    |
92  |                     #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                               ^^^^^
...
149 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_d,".word 1857372275",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/asm.rs:101:31
    |
101 |                     #[cfg(not(riscv))]
    |                               ^^^^^
...
149 |     instruction_hypervisor_extension!(RS1_RS2,,hsv_d,".word 1857372275",__hsv_...
    |     ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `instruction_hypervisor_extension` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/interrupt.rs:11:15
   |
11 |         #[cfg(riscv)]
   |               ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/interrupt.rs:13:19
   |
13 |         #[cfg(not(riscv))]
   |                   ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/interrupt.rs:26:15
   |
26 |         #[cfg(riscv)]
   |               ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/interrupt.rs:28:19
   |
28 |         #[cfg(not(riscv))]
   |                   ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/paging/page_table.rs:213:7
    |
213 | #[cfg(riscv64)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/paging/page_table.rs:215:7
    |
215 | #[cfg(riscv32)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/paging/page_table.rs:217:7
    |
217 | #[cfg(riscv64)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/paging/page_table.rs:219:7
    |
219 | #[cfg(riscv32)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/paging/page_table.rs:221:7
    |
221 | #[cfg(riscv64)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/paging/page_table.rs:223:7
    |
223 | #[cfg(riscv32)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/paging/page_table.rs:225:15
    |
225 | #[cfg(not(any(riscv32, riscv64)))]
    |               ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/paging/page_table.rs:225:24
    |
225 | #[cfg(not(any(riscv32, riscv64)))]
    |                        ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/paging/page_table.rs:227:15
    |
227 | #[cfg(not(any(riscv32, riscv64)))]
    |               ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/paging/page_table.rs:227:24
    |
227 | #[cfg(not(any(riscv32, riscv64)))]
    |                        ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/paging/page_table.rs:232:7
    |
232 | #[cfg(riscv64)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/paging/page_table.rs:234:7
    |
234 | #[cfg(riscv32)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uie.rs:37:1
   |
37 | read_csr_as!(Uie, 0x004, __read_uie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uie.rs:37:1
   |
37 | read_csr_as!(Uie, 0x004, __read_uie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uie.rs:37:1
   |
37 | read_csr_as!(Uie, 0x004, __read_uie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uie.rs:38:1
    |
38  | set!(0x004, __set_uie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uie.rs:38:1
    |
38  | set!(0x004, __set_uie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uie.rs:38:1
    |
38  | set!(0x004, __set_uie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uie.rs:39:1
    |
39  | clear!(0x004, __clear_uie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uie.rs:39:1
    |
39  | clear!(0x004, __clear_uie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uie.rs:39:1
    |
39  | clear!(0x004, __clear_uie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/ustatus.rs:26:1
   |
26 | read_csr_as!(Ustatus, 0x000, __read_ustatus);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/ustatus.rs:26:1
   |
26 | read_csr_as!(Ustatus, 0x000, __read_ustatus);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/ustatus.rs:26:1
   |
26 | read_csr_as!(Ustatus, 0x000, __read_ustatus);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:27:1
    |
27  | write_csr!(0x000, __write_ustatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:27:1
    |
27  | write_csr!(0x000, __write_ustatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:27:1
    |
27  | write_csr!(0x000, __write_ustatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:28:1
    |
28  | set!(0x000, __set_ustatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:28:1
    |
28  | set!(0x000, __set_ustatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:28:1
    |
28  | set!(0x000, __set_ustatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:29:1
    |
29  | clear!(0x000, __clear_ustatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:29:1
    |
29  | clear!(0x000, __clear_ustatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/ustatus.rs:29:1
    |
29  | clear!(0x000, __clear_ustatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/utvec.rs:33:1
   |
33 | read_csr_as!(Utvec, 0x005, __read_utvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/utvec.rs:33:1
   |
33 | read_csr_as!(Utvec, 0x005, __read_utvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/utvec.rs:33:1
   |
33 | read_csr_as!(Utvec, 0x005, __read_utvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/utvec.rs:34:1
    |
34  | write_csr!(0x005, __write_utvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/utvec.rs:34:1
    |
34  | write_csr!(0x005, __write_utvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/utvec.rs:34:1
    |
34  | write_csr!(0x005, __write_utvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/ucause.rs:17:1
   |
17 | read_csr_as!(Ucause, 0x042, __read_ucause);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/ucause.rs:17:1
   |
17 | read_csr_as!(Ucause, 0x042, __read_ucause);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/ucause.rs:17:1
   |
17 | read_csr_as!(Ucause, 0x042, __read_ucause);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/uepc.rs:3:1
  |
3 | read_csr_as_usize!(0x041, __read_uepc);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uepc.rs:3:1
   |
3  | read_csr_as_usize!(0x041, __read_uepc);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uepc.rs:3:1
   |
3  | read_csr_as_usize!(0x041, __read_uepc);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uepc.rs:4:1
    |
4   | write_csr_as_usize!(0x041, __write_uepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uepc.rs:4:1
    |
4   | write_csr_as_usize!(0x041, __write_uepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uepc.rs:4:1
    |
4   | write_csr_as_usize!(0x041, __write_uepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uip.rs:37:1
   |
37 | read_csr_as!(Uip, 0x044, __read_uip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uip.rs:37:1
   |
37 | read_csr_as!(Uip, 0x044, __read_uip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uip.rs:37:1
   |
37 | read_csr_as!(Uip, 0x044, __read_uip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/uscratch.rs:3:1
  |
3 | read_csr_as_usize!(0x040, __read_uscratch);
  | ------------------------------------------ in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uscratch.rs:3:1
   |
3  | read_csr_as_usize!(0x040, __read_uscratch);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/uscratch.rs:3:1
   |
3  | read_csr_as_usize!(0x040, __read_uscratch);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x040, __write_uscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x040, __write_uscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/uscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x040, __write_uscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/utval.rs:3:1
  |
3 | read_csr_as_usize!(0x043, __read_utval);
  | --------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/utval.rs:3:1
   |
3  | read_csr_as_usize!(0x043, __read_utval);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/utval.rs:3:1
   |
3  | read_csr_as_usize!(0x043, __read_utval);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:103:1
    |
103 | read_csr!(0x003, __read_fcsr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:103:1
    |
103 | read_csr!(0x003, __read_fcsr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:103:1
    |
103 | read_csr!(0x003, __read_fcsr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:104:1
    |
104 | write_csr!(0x003, __write_fcsr);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:104:1
    |
104 | write_csr!(0x003, __write_fcsr);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:104:1
    |
104 | write_csr!(0x003, __write_fcsr);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:105:1
    |
105 | clear!(0x003, __clear_fcsr);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:105:1
    |
105 | clear!(0x003, __clear_fcsr);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/fcsr.rs:105:1
    |
105 | clear!(0x003, __clear_fcsr);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/time.rs:3:1
  |
3 | read_csr_as_usize!(0xC01, __read_time);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/time.rs:3:1
   |
3  | read_csr_as_usize!(0xC01, __read_time);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/time.rs:3:1
   |
3  | read_csr_as_usize!(0xC01, __read_time);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/time.rs:4:1
    |
4   | read_composite_csr!(super::timeh::read(), read());
    | ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/time.rs:4:1
    |
4   | read_composite_csr!(super::timeh::read(), read());
    | ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:24:1
   |
24 | reg!(0xC03, hpmcounter3,  hpmcounter3h,  __read_hpmcounter3,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:24:1
   |
24 | reg!(0xC03, hpmcounter3,  hpmcounter3h,  __read_hpmcounter3,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:24:1
   |
24 | reg!(0xC03, hpmcounter3,  hpmcounter3h,  __read_hpmcounter3,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:24:1
    |
24  | reg!(0xC03, hpmcounter3,  hpmcounter3h,  __read_hpmcounter3,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:24:1
    |
24  | reg!(0xC03, hpmcounter3,  hpmcounter3h,  __read_hpmcounter3,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:25:1
   |
25 | reg!(0xC04, hpmcounter4,  hpmcounter4h,  __read_hpmcounter4,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:25:1
   |
25 | reg!(0xC04, hpmcounter4,  hpmcounter4h,  __read_hpmcounter4,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:25:1
   |
25 | reg!(0xC04, hpmcounter4,  hpmcounter4h,  __read_hpmcounter4,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:25:1
    |
25  | reg!(0xC04, hpmcounter4,  hpmcounter4h,  __read_hpmcounter4,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:25:1
    |
25  | reg!(0xC04, hpmcounter4,  hpmcounter4h,  __read_hpmcounter4,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:26:1
   |
26 | reg!(0xC05, hpmcounter5,  hpmcounter5h,  __read_hpmcounter5,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:26:1
   |
26 | reg!(0xC05, hpmcounter5,  hpmcounter5h,  __read_hpmcounter5,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:26:1
   |
26 | reg!(0xC05, hpmcounter5,  hpmcounter5h,  __read_hpmcounter5,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:26:1
    |
26  | reg!(0xC05, hpmcounter5,  hpmcounter5h,  __read_hpmcounter5,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:26:1
    |
26  | reg!(0xC05, hpmcounter5,  hpmcounter5h,  __read_hpmcounter5,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:27:1
   |
27 | reg!(0xC06, hpmcounter6,  hpmcounter6h,  __read_hpmcounter6,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:27:1
   |
27 | reg!(0xC06, hpmcounter6,  hpmcounter6h,  __read_hpmcounter6,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:27:1
   |
27 | reg!(0xC06, hpmcounter6,  hpmcounter6h,  __read_hpmcounter6,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:27:1
    |
27  | reg!(0xC06, hpmcounter6,  hpmcounter6h,  __read_hpmcounter6,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:27:1
    |
27  | reg!(0xC06, hpmcounter6,  hpmcounter6h,  __read_hpmcounter6,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:28:1
   |
28 | reg!(0xC07, hpmcounter7,  hpmcounter7h,  __read_hpmcounter7,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:28:1
   |
28 | reg!(0xC07, hpmcounter7,  hpmcounter7h,  __read_hpmcounter7,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:28:1
   |
28 | reg!(0xC07, hpmcounter7,  hpmcounter7h,  __read_hpmcounter7,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:28:1
    |
28  | reg!(0xC07, hpmcounter7,  hpmcounter7h,  __read_hpmcounter7,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:28:1
    |
28  | reg!(0xC07, hpmcounter7,  hpmcounter7h,  __read_hpmcounter7,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:29:1
   |
29 | reg!(0xC08, hpmcounter8,  hpmcounter8h,  __read_hpmcounter8,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:29:1
   |
29 | reg!(0xC08, hpmcounter8,  hpmcounter8h,  __read_hpmcounter8,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:29:1
   |
29 | reg!(0xC08, hpmcounter8,  hpmcounter8h,  __read_hpmcounter8,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:29:1
    |
29  | reg!(0xC08, hpmcounter8,  hpmcounter8h,  __read_hpmcounter8,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:29:1
    |
29  | reg!(0xC08, hpmcounter8,  hpmcounter8h,  __read_hpmcounter8,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:30:1
   |
30 | reg!(0xC09, hpmcounter9,  hpmcounter9h,  __read_hpmcounter9,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:30:1
   |
30 | reg!(0xC09, hpmcounter9,  hpmcounter9h,  __read_hpmcounter9,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:30:1
   |
30 | reg!(0xC09, hpmcounter9,  hpmcounter9h,  __read_hpmcounter9,  __write_hpmcounter...
   | ---------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:30:1
    |
30  | reg!(0xC09, hpmcounter9,  hpmcounter9h,  __read_hpmcounter9,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:30:1
    |
30  | reg!(0xC09, hpmcounter9,  hpmcounter9h,  __read_hpmcounter9,  __write_hpmcounter...
    | ---------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:31:1
   |
31 | reg!(0xC0A, hpmcounter10, hpmcounter10h, __read_hpmcounter10, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:31:1
   |
31 | reg!(0xC0A, hpmcounter10, hpmcounter10h, __read_hpmcounter10, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:31:1
   |
31 | reg!(0xC0A, hpmcounter10, hpmcounter10h, __read_hpmcounter10, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:31:1
    |
31  | reg!(0xC0A, hpmcounter10, hpmcounter10h, __read_hpmcounter10, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:31:1
    |
31  | reg!(0xC0A, hpmcounter10, hpmcounter10h, __read_hpmcounter10, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:32:1
   |
32 | reg!(0xC0B, hpmcounter11, hpmcounter11h, __read_hpmcounter11, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:32:1
   |
32 | reg!(0xC0B, hpmcounter11, hpmcounter11h, __read_hpmcounter11, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:32:1
   |
32 | reg!(0xC0B, hpmcounter11, hpmcounter11h, __read_hpmcounter11, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:32:1
    |
32  | reg!(0xC0B, hpmcounter11, hpmcounter11h, __read_hpmcounter11, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:32:1
    |
32  | reg!(0xC0B, hpmcounter11, hpmcounter11h, __read_hpmcounter11, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:33:1
   |
33 | reg!(0xC0C, hpmcounter12, hpmcounter12h, __read_hpmcounter12, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:33:1
   |
33 | reg!(0xC0C, hpmcounter12, hpmcounter12h, __read_hpmcounter12, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:33:1
   |
33 | reg!(0xC0C, hpmcounter12, hpmcounter12h, __read_hpmcounter12, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:33:1
    |
33  | reg!(0xC0C, hpmcounter12, hpmcounter12h, __read_hpmcounter12, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:33:1
    |
33  | reg!(0xC0C, hpmcounter12, hpmcounter12h, __read_hpmcounter12, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:34:1
   |
34 | reg!(0xC0D, hpmcounter13, hpmcounter13h, __read_hpmcounter13, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:34:1
   |
34 | reg!(0xC0D, hpmcounter13, hpmcounter13h, __read_hpmcounter13, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:34:1
   |
34 | reg!(0xC0D, hpmcounter13, hpmcounter13h, __read_hpmcounter13, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:34:1
    |
34  | reg!(0xC0D, hpmcounter13, hpmcounter13h, __read_hpmcounter13, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:34:1
    |
34  | reg!(0xC0D, hpmcounter13, hpmcounter13h, __read_hpmcounter13, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:35:1
   |
35 | reg!(0xC0E, hpmcounter14, hpmcounter14h, __read_hpmcounter14, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:35:1
   |
35 | reg!(0xC0E, hpmcounter14, hpmcounter14h, __read_hpmcounter14, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:35:1
   |
35 | reg!(0xC0E, hpmcounter14, hpmcounter14h, __read_hpmcounter14, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:35:1
    |
35  | reg!(0xC0E, hpmcounter14, hpmcounter14h, __read_hpmcounter14, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:35:1
    |
35  | reg!(0xC0E, hpmcounter14, hpmcounter14h, __read_hpmcounter14, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:36:1
   |
36 | reg!(0xC0F, hpmcounter15, hpmcounter15h, __read_hpmcounter15, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:36:1
   |
36 | reg!(0xC0F, hpmcounter15, hpmcounter15h, __read_hpmcounter15, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:36:1
   |
36 | reg!(0xC0F, hpmcounter15, hpmcounter15h, __read_hpmcounter15, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:36:1
    |
36  | reg!(0xC0F, hpmcounter15, hpmcounter15h, __read_hpmcounter15, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:36:1
    |
36  | reg!(0xC0F, hpmcounter15, hpmcounter15h, __read_hpmcounter15, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:37:1
   |
37 | reg!(0xC10, hpmcounter16, hpmcounter16h, __read_hpmcounter16, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:37:1
   |
37 | reg!(0xC10, hpmcounter16, hpmcounter16h, __read_hpmcounter16, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:37:1
   |
37 | reg!(0xC10, hpmcounter16, hpmcounter16h, __read_hpmcounter16, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:37:1
    |
37  | reg!(0xC10, hpmcounter16, hpmcounter16h, __read_hpmcounter16, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:37:1
    |
37  | reg!(0xC10, hpmcounter16, hpmcounter16h, __read_hpmcounter16, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:38:1
   |
38 | reg!(0xC11, hpmcounter17, hpmcounter17h, __read_hpmcounter17, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:38:1
   |
38 | reg!(0xC11, hpmcounter17, hpmcounter17h, __read_hpmcounter17, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:38:1
   |
38 | reg!(0xC11, hpmcounter17, hpmcounter17h, __read_hpmcounter17, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:38:1
    |
38  | reg!(0xC11, hpmcounter17, hpmcounter17h, __read_hpmcounter17, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:38:1
    |
38  | reg!(0xC11, hpmcounter17, hpmcounter17h, __read_hpmcounter17, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:39:1
   |
39 | reg!(0xC12, hpmcounter18, hpmcounter18h, __read_hpmcounter18, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:39:1
   |
39 | reg!(0xC12, hpmcounter18, hpmcounter18h, __read_hpmcounter18, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:39:1
   |
39 | reg!(0xC12, hpmcounter18, hpmcounter18h, __read_hpmcounter18, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:39:1
    |
39  | reg!(0xC12, hpmcounter18, hpmcounter18h, __read_hpmcounter18, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:39:1
    |
39  | reg!(0xC12, hpmcounter18, hpmcounter18h, __read_hpmcounter18, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:40:1
   |
40 | reg!(0xC13, hpmcounter19, hpmcounter19h, __read_hpmcounter19, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:40:1
   |
40 | reg!(0xC13, hpmcounter19, hpmcounter19h, __read_hpmcounter19, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:40:1
   |
40 | reg!(0xC13, hpmcounter19, hpmcounter19h, __read_hpmcounter19, __write_hpmcounter1...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:40:1
    |
40  | reg!(0xC13, hpmcounter19, hpmcounter19h, __read_hpmcounter19, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:40:1
    |
40  | reg!(0xC13, hpmcounter19, hpmcounter19h, __read_hpmcounter19, __write_hpmcounter1...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:41:1
   |
41 | reg!(0xC14, hpmcounter20, hpmcounter20h, __read_hpmcounter20, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:41:1
   |
41 | reg!(0xC14, hpmcounter20, hpmcounter20h, __read_hpmcounter20, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:41:1
   |
41 | reg!(0xC14, hpmcounter20, hpmcounter20h, __read_hpmcounter20, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:41:1
    |
41  | reg!(0xC14, hpmcounter20, hpmcounter20h, __read_hpmcounter20, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:41:1
    |
41  | reg!(0xC14, hpmcounter20, hpmcounter20h, __read_hpmcounter20, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:42:1
   |
42 | reg!(0xC15, hpmcounter21, hpmcounter21h, __read_hpmcounter21, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:42:1
   |
42 | reg!(0xC15, hpmcounter21, hpmcounter21h, __read_hpmcounter21, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:42:1
   |
42 | reg!(0xC15, hpmcounter21, hpmcounter21h, __read_hpmcounter21, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:42:1
    |
42  | reg!(0xC15, hpmcounter21, hpmcounter21h, __read_hpmcounter21, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:42:1
    |
42  | reg!(0xC15, hpmcounter21, hpmcounter21h, __read_hpmcounter21, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:43:1
   |
43 | reg!(0xC16, hpmcounter22, hpmcounter22h, __read_hpmcounter22, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:43:1
   |
43 | reg!(0xC16, hpmcounter22, hpmcounter22h, __read_hpmcounter22, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:43:1
   |
43 | reg!(0xC16, hpmcounter22, hpmcounter22h, __read_hpmcounter22, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:43:1
    |
43  | reg!(0xC16, hpmcounter22, hpmcounter22h, __read_hpmcounter22, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:43:1
    |
43  | reg!(0xC16, hpmcounter22, hpmcounter22h, __read_hpmcounter22, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:44:1
   |
44 | reg!(0xC17, hpmcounter23, hpmcounter23h, __read_hpmcounter23, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:44:1
   |
44 | reg!(0xC17, hpmcounter23, hpmcounter23h, __read_hpmcounter23, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:44:1
   |
44 | reg!(0xC17, hpmcounter23, hpmcounter23h, __read_hpmcounter23, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:44:1
    |
44  | reg!(0xC17, hpmcounter23, hpmcounter23h, __read_hpmcounter23, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:44:1
    |
44  | reg!(0xC17, hpmcounter23, hpmcounter23h, __read_hpmcounter23, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:45:1
   |
45 | reg!(0xC18, hpmcounter24, hpmcounter24h, __read_hpmcounter24, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:45:1
   |
45 | reg!(0xC18, hpmcounter24, hpmcounter24h, __read_hpmcounter24, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:45:1
   |
45 | reg!(0xC18, hpmcounter24, hpmcounter24h, __read_hpmcounter24, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:45:1
    |
45  | reg!(0xC18, hpmcounter24, hpmcounter24h, __read_hpmcounter24, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:45:1
    |
45  | reg!(0xC18, hpmcounter24, hpmcounter24h, __read_hpmcounter24, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:46:1
   |
46 | reg!(0xC19, hpmcounter25, hpmcounter25h, __read_hpmcounter25, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:46:1
   |
46 | reg!(0xC19, hpmcounter25, hpmcounter25h, __read_hpmcounter25, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:46:1
   |
46 | reg!(0xC19, hpmcounter25, hpmcounter25h, __read_hpmcounter25, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:46:1
    |
46  | reg!(0xC19, hpmcounter25, hpmcounter25h, __read_hpmcounter25, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:46:1
    |
46  | reg!(0xC19, hpmcounter25, hpmcounter25h, __read_hpmcounter25, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:47:1
   |
47 | reg!(0xC1A, hpmcounter26, hpmcounter26h, __read_hpmcounter26, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:47:1
   |
47 | reg!(0xC1A, hpmcounter26, hpmcounter26h, __read_hpmcounter26, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:47:1
   |
47 | reg!(0xC1A, hpmcounter26, hpmcounter26h, __read_hpmcounter26, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:47:1
    |
47  | reg!(0xC1A, hpmcounter26, hpmcounter26h, __read_hpmcounter26, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:47:1
    |
47  | reg!(0xC1A, hpmcounter26, hpmcounter26h, __read_hpmcounter26, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:48:1
   |
48 | reg!(0xC1B, hpmcounter27, hpmcounter27h, __read_hpmcounter27, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:48:1
   |
48 | reg!(0xC1B, hpmcounter27, hpmcounter27h, __read_hpmcounter27, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:48:1
   |
48 | reg!(0xC1B, hpmcounter27, hpmcounter27h, __read_hpmcounter27, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:48:1
    |
48  | reg!(0xC1B, hpmcounter27, hpmcounter27h, __read_hpmcounter27, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:48:1
    |
48  | reg!(0xC1B, hpmcounter27, hpmcounter27h, __read_hpmcounter27, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:49:1
   |
49 | reg!(0xC1C, hpmcounter28, hpmcounter28h, __read_hpmcounter28, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:49:1
   |
49 | reg!(0xC1C, hpmcounter28, hpmcounter28h, __read_hpmcounter28, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:49:1
   |
49 | reg!(0xC1C, hpmcounter28, hpmcounter28h, __read_hpmcounter28, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:49:1
    |
49  | reg!(0xC1C, hpmcounter28, hpmcounter28h, __read_hpmcounter28, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:49:1
    |
49  | reg!(0xC1C, hpmcounter28, hpmcounter28h, __read_hpmcounter28, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:50:1
   |
50 | reg!(0xC1D, hpmcounter29, hpmcounter29h, __read_hpmcounter29, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:50:1
   |
50 | reg!(0xC1D, hpmcounter29, hpmcounter29h, __read_hpmcounter29, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:50:1
   |
50 | reg!(0xC1D, hpmcounter29, hpmcounter29h, __read_hpmcounter29, __write_hpmcounter2...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:50:1
    |
50  | reg!(0xC1D, hpmcounter29, hpmcounter29h, __read_hpmcounter29, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:50:1
    |
50  | reg!(0xC1D, hpmcounter29, hpmcounter29h, __read_hpmcounter29, __write_hpmcounter2...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:51:1
   |
51 | reg!(0xC1E, hpmcounter30, hpmcounter30h, __read_hpmcounter30, __write_hpmcounter3...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:51:1
   |
51 | reg!(0xC1E, hpmcounter30, hpmcounter30h, __read_hpmcounter30, __write_hpmcounter3...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:51:1
   |
51 | reg!(0xC1E, hpmcounter30, hpmcounter30h, __read_hpmcounter30, __write_hpmcounter3...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:51:1
    |
51  | reg!(0xC1E, hpmcounter30, hpmcounter30h, __read_hpmcounter30, __write_hpmcounter3...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:51:1
    |
51  | reg!(0xC1E, hpmcounter30, hpmcounter30h, __read_hpmcounter30, __write_hpmcounter3...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:52:1
   |
52 | reg!(0xC1F, hpmcounter31, hpmcounter31h, __read_hpmcounter31, __write_hpmcounter3...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:52:1
   |
52 | reg!(0xC1F, hpmcounter31, hpmcounter31h, __read_hpmcounter31, __write_hpmcounter3...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hpmcounterx.rs:52:1
   |
52 | reg!(0xC1F, hpmcounter31, hpmcounter31h, __read_hpmcounter31, __write_hpmcounter3...
   | ----------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:52:1
    |
52  | reg!(0xC1F, hpmcounter31, hpmcounter31h, __read_hpmcounter31, __write_hpmcounter3...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hpmcounterx.rs:52:1
    |
52  | reg!(0xC1F, hpmcounter31, hpmcounter31h, __read_hpmcounter31, __write_hpmcounter3...
    | ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:54:1
   |
54 | regh!(0xC83, hpmcounter3h,  __read_hpmcounter3h,  __write_hpmcounter3h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:54:1
   |
54 | regh!(0xC83, hpmcounter3h,  __read_hpmcounter3h,  __write_hpmcounter3h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:54:1
   |
54 | regh!(0xC83, hpmcounter3h,  __read_hpmcounter3h,  __write_hpmcounter3h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:55:1
   |
55 | regh!(0xC84, hpmcounter4h,  __read_hpmcounter4h,  __write_hpmcounter4h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:55:1
   |
55 | regh!(0xC84, hpmcounter4h,  __read_hpmcounter4h,  __write_hpmcounter4h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:55:1
   |
55 | regh!(0xC84, hpmcounter4h,  __read_hpmcounter4h,  __write_hpmcounter4h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:56:1
   |
56 | regh!(0xC85, hpmcounter5h,  __read_hpmcounter5h,  __write_hpmcounter5h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:56:1
   |
56 | regh!(0xC85, hpmcounter5h,  __read_hpmcounter5h,  __write_hpmcounter5h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:56:1
   |
56 | regh!(0xC85, hpmcounter5h,  __read_hpmcounter5h,  __write_hpmcounter5h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:57:1
   |
57 | regh!(0xC86, hpmcounter6h,  __read_hpmcounter6h,  __write_hpmcounter6h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:57:1
   |
57 | regh!(0xC86, hpmcounter6h,  __read_hpmcounter6h,  __write_hpmcounter6h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:57:1
   |
57 | regh!(0xC86, hpmcounter6h,  __read_hpmcounter6h,  __write_hpmcounter6h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:58:1
   |
58 | regh!(0xC87, hpmcounter7h,  __read_hpmcounter7h,  __write_hpmcounter7h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:58:1
   |
58 | regh!(0xC87, hpmcounter7h,  __read_hpmcounter7h,  __write_hpmcounter7h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:58:1
   |
58 | regh!(0xC87, hpmcounter7h,  __read_hpmcounter7h,  __write_hpmcounter7h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:59:1
   |
59 | regh!(0xC88, hpmcounter8h,  __read_hpmcounter8h,  __write_hpmcounter8h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:59:1
   |
59 | regh!(0xC88, hpmcounter8h,  __read_hpmcounter8h,  __write_hpmcounter8h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:59:1
   |
59 | regh!(0xC88, hpmcounter8h,  __read_hpmcounter8h,  __write_hpmcounter8h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:60:1
   |
60 | regh!(0xC89, hpmcounter9h,  __read_hpmcounter9h,  __write_hpmcounter9h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:60:1
   |
60 | regh!(0xC89, hpmcounter9h,  __read_hpmcounter9h,  __write_hpmcounter9h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:60:1
   |
60 | regh!(0xC89, hpmcounter9h,  __read_hpmcounter9h,  __write_hpmcounter9h);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:61:1
   |
61 | regh!(0xC8A, hpmcounter10h, __read_hpmcounter10h, __write_hpmcounter10h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:61:1
   |
61 | regh!(0xC8A, hpmcounter10h, __read_hpmcounter10h, __write_hpmcounter10h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:61:1
   |
61 | regh!(0xC8A, hpmcounter10h, __read_hpmcounter10h, __write_hpmcounter10h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:62:1
   |
62 | regh!(0xC8B, hpmcounter11h, __read_hpmcounter11h, __write_hpmcounter11h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:62:1
   |
62 | regh!(0xC8B, hpmcounter11h, __read_hpmcounter11h, __write_hpmcounter11h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:62:1
   |
62 | regh!(0xC8B, hpmcounter11h, __read_hpmcounter11h, __write_hpmcounter11h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:63:1
   |
63 | regh!(0xC8C, hpmcounter12h, __read_hpmcounter12h, __write_hpmcounter12h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:63:1
   |
63 | regh!(0xC8C, hpmcounter12h, __read_hpmcounter12h, __write_hpmcounter12h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:63:1
   |
63 | regh!(0xC8C, hpmcounter12h, __read_hpmcounter12h, __write_hpmcounter12h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:64:1
   |
64 | regh!(0xC8D, hpmcounter13h, __read_hpmcounter13h, __write_hpmcounter13h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:64:1
   |
64 | regh!(0xC8D, hpmcounter13h, __read_hpmcounter13h, __write_hpmcounter13h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:64:1
   |
64 | regh!(0xC8D, hpmcounter13h, __read_hpmcounter13h, __write_hpmcounter13h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:65:1
   |
65 | regh!(0xC8E, hpmcounter14h, __read_hpmcounter14h, __write_hpmcounter14h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:65:1
   |
65 | regh!(0xC8E, hpmcounter14h, __read_hpmcounter14h, __write_hpmcounter14h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:65:1
   |
65 | regh!(0xC8E, hpmcounter14h, __read_hpmcounter14h, __write_hpmcounter14h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:66:1
   |
66 | regh!(0xC8F, hpmcounter15h, __read_hpmcounter15h, __write_hpmcounter15h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:66:1
   |
66 | regh!(0xC8F, hpmcounter15h, __read_hpmcounter15h, __write_hpmcounter15h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:66:1
   |
66 | regh!(0xC8F, hpmcounter15h, __read_hpmcounter15h, __write_hpmcounter15h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:67:1
   |
67 | regh!(0xC90, hpmcounter16h, __read_hpmcounter16h, __write_hpmcounter16h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:67:1
   |
67 | regh!(0xC90, hpmcounter16h, __read_hpmcounter16h, __write_hpmcounter16h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:67:1
   |
67 | regh!(0xC90, hpmcounter16h, __read_hpmcounter16h, __write_hpmcounter16h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:68:1
   |
68 | regh!(0xC91, hpmcounter17h, __read_hpmcounter17h, __write_hpmcounter17h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:68:1
   |
68 | regh!(0xC91, hpmcounter17h, __read_hpmcounter17h, __write_hpmcounter17h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:68:1
   |
68 | regh!(0xC91, hpmcounter17h, __read_hpmcounter17h, __write_hpmcounter17h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:69:1
   |
69 | regh!(0xC92, hpmcounter18h, __read_hpmcounter18h, __write_hpmcounter18h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:69:1
   |
69 | regh!(0xC92, hpmcounter18h, __read_hpmcounter18h, __write_hpmcounter18h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:69:1
   |
69 | regh!(0xC92, hpmcounter18h, __read_hpmcounter18h, __write_hpmcounter18h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:70:1
   |
70 | regh!(0xC93, hpmcounter19h, __read_hpmcounter19h, __write_hpmcounter19h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:70:1
   |
70 | regh!(0xC93, hpmcounter19h, __read_hpmcounter19h, __write_hpmcounter19h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:70:1
   |
70 | regh!(0xC93, hpmcounter19h, __read_hpmcounter19h, __write_hpmcounter19h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:71:1
   |
71 | regh!(0xC94, hpmcounter20h, __read_hpmcounter20h, __write_hpmcounter20h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:71:1
   |
71 | regh!(0xC94, hpmcounter20h, __read_hpmcounter20h, __write_hpmcounter20h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:71:1
   |
71 | regh!(0xC94, hpmcounter20h, __read_hpmcounter20h, __write_hpmcounter20h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:72:1
   |
72 | regh!(0xC95, hpmcounter21h, __read_hpmcounter21h, __write_hpmcounter21h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:72:1
   |
72 | regh!(0xC95, hpmcounter21h, __read_hpmcounter21h, __write_hpmcounter21h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:72:1
   |
72 | regh!(0xC95, hpmcounter21h, __read_hpmcounter21h, __write_hpmcounter21h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:73:1
   |
73 | regh!(0xC96, hpmcounter22h, __read_hpmcounter22h, __write_hpmcounter22h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:73:1
   |
73 | regh!(0xC96, hpmcounter22h, __read_hpmcounter22h, __write_hpmcounter22h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:73:1
   |
73 | regh!(0xC96, hpmcounter22h, __read_hpmcounter22h, __write_hpmcounter22h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:74:1
   |
74 | regh!(0xC97, hpmcounter23h, __read_hpmcounter23h, __write_hpmcounter23h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:74:1
   |
74 | regh!(0xC97, hpmcounter23h, __read_hpmcounter23h, __write_hpmcounter23h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:74:1
   |
74 | regh!(0xC97, hpmcounter23h, __read_hpmcounter23h, __write_hpmcounter23h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:75:1
   |
75 | regh!(0xC98, hpmcounter24h, __read_hpmcounter24h, __write_hpmcounter24h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:75:1
   |
75 | regh!(0xC98, hpmcounter24h, __read_hpmcounter24h, __write_hpmcounter24h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:75:1
   |
75 | regh!(0xC98, hpmcounter24h, __read_hpmcounter24h, __write_hpmcounter24h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:76:1
   |
76 | regh!(0xC99, hpmcounter25h, __read_hpmcounter25h, __write_hpmcounter25h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:76:1
   |
76 | regh!(0xC99, hpmcounter25h, __read_hpmcounter25h, __write_hpmcounter25h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:76:1
   |
76 | regh!(0xC99, hpmcounter25h, __read_hpmcounter25h, __write_hpmcounter25h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:77:1
   |
77 | regh!(0xC9A, hpmcounter26h, __read_hpmcounter26h, __write_hpmcounter26h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:77:1
   |
77 | regh!(0xC9A, hpmcounter26h, __read_hpmcounter26h, __write_hpmcounter26h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:77:1
   |
77 | regh!(0xC9A, hpmcounter26h, __read_hpmcounter26h, __write_hpmcounter26h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:78:1
   |
78 | regh!(0xC9B, hpmcounter27h, __read_hpmcounter27h, __write_hpmcounter27h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:78:1
   |
78 | regh!(0xC9B, hpmcounter27h, __read_hpmcounter27h, __write_hpmcounter27h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:78:1
   |
78 | regh!(0xC9B, hpmcounter27h, __read_hpmcounter27h, __write_hpmcounter27h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:79:1
   |
79 | regh!(0xC9C, hpmcounter28h, __read_hpmcounter28h, __write_hpmcounter28h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:79:1
   |
79 | regh!(0xC9C, hpmcounter28h, __read_hpmcounter28h, __write_hpmcounter28h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:79:1
   |
79 | regh!(0xC9C, hpmcounter28h, __read_hpmcounter28h, __write_hpmcounter28h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:80:1
   |
80 | regh!(0xC9D, hpmcounter29h, __read_hpmcounter29h, __write_hpmcounter29h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:80:1
   |
80 | regh!(0xC9D, hpmcounter29h, __read_hpmcounter29h, __write_hpmcounter29h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:80:1
   |
80 | regh!(0xC9D, hpmcounter29h, __read_hpmcounter29h, __write_hpmcounter29h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:81:1
   |
81 | regh!(0xC9E, hpmcounter30h, __read_hpmcounter30h, __write_hpmcounter30h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:81:1
   |
81 | regh!(0xC9E, hpmcounter30h, __read_hpmcounter30h, __write_hpmcounter30h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:81:1
   |
81 | regh!(0xC9E, hpmcounter30h, __read_hpmcounter30h, __write_hpmcounter30h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:82:1
   |
82 | regh!(0xC9F, hpmcounter31h, __read_hpmcounter31h, __write_hpmcounter31h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:82:1
   |
82 | regh!(0xC9F, hpmcounter31h, __read_hpmcounter31h, __write_hpmcounter31h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/hpmcounterx.rs:82:1
   |
82 | regh!(0xC9F, hpmcounter31h, __read_hpmcounter31h, __write_hpmcounter31h);
   | ------------------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/timeh.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xC81, __read_timeh);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/timeh.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xC81, __read_timeh);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/timeh.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xC81, __read_timeh);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sie.rs:55:1
   |
55 | read_csr_as!(Sie, 0x104, __read_sie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sie.rs:55:1
   |
55 | read_csr_as!(Sie, 0x104, __read_sie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sie.rs:55:1
   |
55 | read_csr_as!(Sie, 0x104, __read_sie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sie.rs:56:1
    |
56  | set!(0x104, __set_sie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sie.rs:56:1
    |
56  | set!(0x104, __set_sie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sie.rs:56:1
    |
56  | set!(0x104, __set_sie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sie.rs:57:1
    |
57  | clear!(0x104, __clear_sie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sie.rs:57:1
    |
57  | clear!(0x104, __clear_sie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sie.rs:57:1
    |
57  | clear!(0x104, __clear_sie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/sstatus.rs:146:7
    |
146 | #[cfg(riscv)]
    |       ^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/sstatus.rs:156:7
    |
156 | #[cfg(riscv)]
    |       ^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:120:1
    |
120 | read_csr_as!(Sstatus, 0x100, __read_sstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:120:1
    |
120 | read_csr_as!(Sstatus, 0x100, __read_sstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:120:1
    |
120 | read_csr_as!(Sstatus, 0x100, __read_sstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:121:1
    |
121 | write_csr!(0x100, __write_sstatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:121:1
    |
121 | write_csr!(0x100, __write_sstatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:121:1
    |
121 | write_csr!(0x100, __write_sstatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:122:1
    |
122 | set!(0x100, __set_sstatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:122:1
    |
122 | set!(0x100, __set_sstatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:122:1
    |
122 | set!(0x100, __set_sstatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:123:1
    |
123 | clear!(0x100, __clear_sstatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:123:1
    |
123 | clear!(0x100, __clear_sstatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sstatus.rs:123:1
    |
123 | clear!(0x100, __clear_sstatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/stvec.rs:33:1
   |
33 | read_csr_as!(Stvec, 0x105, __read_stvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/stvec.rs:33:1
   |
33 | read_csr_as!(Stvec, 0x105, __read_stvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/stvec.rs:33:1
   |
33 | read_csr_as!(Stvec, 0x105, __read_stvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/stvec.rs:34:1
    |
34  | write_csr!(0x105, __write_stvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/stvec.rs:34:1
    |
34  | write_csr!(0x105, __write_stvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/stvec.rs:34:1
    |
34  | write_csr!(0x105, __write_stvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/scause.rs:133:1
    |
133 | read_csr_as!(Scause, 0x142, __read_scause);
    | ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/scause.rs:133:1
    |
133 | read_csr_as!(Scause, 0x142, __read_scause);
    | ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/scause.rs:133:1
    |
133 | read_csr_as!(Scause, 0x142, __read_scause);
    | ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/sepc.rs:3:1
  |
3 | read_csr_as_usize!(0x141, __read_sepc);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sepc.rs:3:1
   |
3  | read_csr_as_usize!(0x141, __read_sepc);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sepc.rs:3:1
   |
3  | read_csr_as_usize!(0x141, __read_sepc);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sepc.rs:4:1
    |
4   | write_csr_as_usize!(0x141, __write_sepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sepc.rs:4:1
    |
4   | write_csr_as_usize!(0x141, __write_sepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sepc.rs:4:1
    |
4   | write_csr_as_usize!(0x141, __write_sepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sip.rs:55:1
   |
55 | read_csr_as!(Sip, 0x144, __read_sip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sip.rs:55:1
   |
55 | read_csr_as!(Sip, 0x144, __read_sip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sip.rs:55:1
   |
55 | read_csr_as!(Sip, 0x144, __read_sip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/sscratch.rs:3:1
  |
3 | read_csr_as_usize!(0x140, __read_sscratch);
  | ------------------------------------------ in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sscratch.rs:3:1
   |
3  | read_csr_as_usize!(0x140, __read_sscratch);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/sscratch.rs:3:1
   |
3  | read_csr_as_usize!(0x140, __read_sscratch);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x140, __write_sscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x140, __write_sscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/sscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x140, __write_sscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/stval.rs:3:1
  |
3 | read_csr_as_usize!(0x143, __read_stval);
  | --------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/stval.rs:3:1
   |
3  | read_csr_as_usize!(0x143, __read_stval);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/stval.rs:3:1
   |
3  | read_csr_as_usize!(0x143, __read_stval);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/satp.rs:3:7
  |
3 | #[cfg(riscv)]
  |       ^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/satp.rs:5:7
  |
5 | #[cfg(riscv)]
  |       ^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/satp.rs:81:7
   |
81 | #[cfg(riscv32)]
   |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
  --> riscv/src/register/satp.rs:88:7
   |
88 | #[cfg(riscv64)]
   |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/satp.rs:102:7
    |
102 | #[cfg(riscv32)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
   --> riscv/src/register/satp.rs:112:7
    |
112 | #[cfg(riscv64)]
    |       ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/satp.rs:23:11
   |
23 |     #[cfg(riscv32)]
   |           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
  --> riscv/src/register/satp.rs:33:11
   |
33 |     #[cfg(riscv64)]
   |           ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/satp.rs:47:11
   |
47 |     #[cfg(riscv32)]
   |           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
  --> riscv/src/register/satp.rs:54:11
   |
54 |     #[cfg(riscv64)]
   |           ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/satp.rs:61:11
   |
61 |     #[cfg(riscv32)]
   |           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv64`
  --> riscv/src/register/satp.rs:68:11
   |
68 |     #[cfg(riscv64)]
   |           ^^^^^^^ help: found config with similar value: `target_arch = "riscv64"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv64)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv64)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/satp.rs:75:11
   |
75 |     #[cfg(riscv)]
   |           ^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/satp.rs:98:1
   |
98 | read_csr_as!(Satp, 0x180, __read_satp);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/satp.rs:98:1
   |
98 | read_csr_as!(Satp, 0x180, __read_satp);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/satp.rs:98:1
   |
98 | read_csr_as!(Satp, 0x180, __read_satp);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/satp.rs:99:1
    |
99  | write_csr_as_usize!(0x180, __write_satp);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/satp.rs:99:1
    |
99  | write_csr_as_usize!(0x180, __write_satp);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/satp.rs:99:1
    |
99  | write_csr_as_usize!(0x180, __write_satp);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/marchid.rs:18:1
   |
18 | read_csr!(0xF11, __read_marchid);
   | -------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/marchid.rs:18:1
   |
18 | read_csr!(0xF11, __read_marchid);
   | -------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/marchid.rs:18:1
   |
18 | read_csr!(0xF11, __read_marchid);
   | -------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/mhartid.rs:3:1
  |
3 | read_csr_as_usize!(0xf14, __read_mhartid);
  | ----------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhartid.rs:3:1
   |
3  | read_csr_as_usize!(0xf14, __read_mhartid);
   | ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhartid.rs:3:1
   |
3  | read_csr_as_usize!(0xf14, __read_mhartid);
   | ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mimpid.rs:18:1
   |
18 | read_csr!(0xF11, __read_mimpid);
   | ------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mimpid.rs:18:1
   |
18 | read_csr!(0xF11, __read_mimpid);
   | ------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mimpid.rs:18:1
   |
18 | read_csr!(0xF11, __read_mimpid);
   | ------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mvendorid.rs:23:1
   |
23 | read_csr!(0xF11, __read_mvendorid);
   | ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mvendorid.rs:23:1
   |
23 | read_csr!(0xF11, __read_mvendorid);
   | ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mvendorid.rs:23:1
   |
23 | read_csr!(0xF11, __read_mvendorid);
   | ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:103:1
    |
103 | read_csr_as!(Medeleg, 0x302, __read_medeleg);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:103:1
    |
103 | read_csr_as!(Medeleg, 0x302, __read_medeleg);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:103:1
    |
103 | read_csr_as!(Medeleg, 0x302, __read_medeleg);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:104:1
    |
104 | set!(0x302, __set_medeleg);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:104:1
    |
104 | set!(0x302, __set_medeleg);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:104:1
    |
104 | set!(0x302, __set_medeleg);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:105:1
    |
105 | clear!(0x302, __clear_medeleg);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:105:1
    |
105 | clear!(0x302, __clear_medeleg);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/medeleg.rs:105:1
    |
105 | clear!(0x302, __clear_medeleg);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mideleg.rs:55:1
   |
55 | read_csr_as!(Mideleg, 0x303, __read_mideleg);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mideleg.rs:55:1
   |
55 | read_csr_as!(Mideleg, 0x303, __read_mideleg);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mideleg.rs:55:1
   |
55 | read_csr_as!(Mideleg, 0x303, __read_mideleg);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mideleg.rs:56:1
    |
56  | set!(0x303, __set_mideleg);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mideleg.rs:56:1
    |
56  | set!(0x303, __set_mideleg);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mideleg.rs:56:1
    |
56  | set!(0x303, __set_mideleg);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mideleg.rs:57:1
    |
57  | clear!(0x303, __clear_mideleg);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mideleg.rs:57:1
    |
57  | clear!(0x303, __clear_mideleg);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mideleg.rs:57:1
    |
57  | clear!(0x303, __clear_mideleg);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mie.rs:73:1
   |
73 | read_csr_as!(Mie, 0x304, __read_mie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mie.rs:73:1
   |
73 | read_csr_as!(Mie, 0x304, __read_mie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mie.rs:73:1
   |
73 | read_csr_as!(Mie, 0x304, __read_mie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mie.rs:74:1
    |
74  | set!(0x304, __set_mie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mie.rs:74:1
    |
74  | set!(0x304, __set_mie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mie.rs:74:1
    |
74  | set!(0x304, __set_mie);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mie.rs:75:1
    |
75  | clear!(0x304, __clear_mie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mie.rs:75:1
    |
75  | clear!(0x304, __clear_mie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mie.rs:75:1
    |
75  | clear!(0x304, __clear_mie);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/misa.rs:51:1
   |
51 | read_csr!(0x301, __read_misa);
   | ----------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/misa.rs:51:1
   |
51 | read_csr!(0x301, __read_misa);
   | ----------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/misa.rs:51:1
   |
51 | read_csr!(0x301, __read_misa);
   | ----------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:162:1
    |
162 | read_csr_as!(Mstatus, 0x300, __read_mstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:162:1
    |
162 | read_csr_as!(Mstatus, 0x300, __read_mstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:162:1
    |
162 | read_csr_as!(Mstatus, 0x300, __read_mstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:163:1
    |
163 | write_csr!(0x300, __write_mstatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:163:1
    |
163 | write_csr!(0x300, __write_mstatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:163:1
    |
163 | write_csr!(0x300, __write_mstatus);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:164:1
    |
164 | set!(0x300, __set_mstatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:164:1
    |
164 | set!(0x300, __set_mstatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:164:1
    |
164 | set!(0x300, __set_mstatus);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:165:1
    |
165 | clear!(0x300, __clear_mstatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:165:1
    |
165 | clear!(0x300, __clear_mstatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mstatus.rs:165:1
    |
165 | clear!(0x300, __clear_mstatus);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mtvec.rs:38:1
   |
38 | read_csr_as!(Mtvec, 0x305, __read_mtvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mtvec.rs:38:1
   |
38 | read_csr_as!(Mtvec, 0x305, __read_mtvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mtvec.rs:38:1
   |
38 | read_csr_as!(Mtvec, 0x305, __read_mtvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mtvec.rs:40:1
    |
40  | write_csr!(0x305, __write_mtvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mtvec.rs:40:1
    |
40  | write_csr!(0x305, __write_mtvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mtvec.rs:40:1
    |
40  | write_csr!(0x305, __write_mtvec);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `128`
   --> riscv/src/register/mcause.rs:103:19
    |
103 |             #[cfg(target_pointer_width = "128")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `128`
   --> riscv/src/register/mcause.rs:126:19
    |
126 |             #[cfg(target_pointer_width = "128")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mcause.rs:138:1
    |
138 | read_csr_as!(Mcause, 0x342, __read_mcause);
    | ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mcause.rs:138:1
    |
138 | read_csr_as!(Mcause, 0x342, __read_mcause);
    | ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mcause.rs:138:1
    |
138 | read_csr_as!(Mcause, 0x342, __read_mcause);
    | ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/mepc.rs:3:1
  |
3 | read_csr_as_usize!(0x341, __read_mepc);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mepc.rs:3:1
   |
3  | read_csr_as_usize!(0x341, __read_mepc);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mepc.rs:3:1
   |
3  | read_csr_as_usize!(0x341, __read_mepc);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mepc.rs:4:1
    |
4   | write_csr_as_usize!(0x341, __write_mepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mepc.rs:4:1
    |
4   | write_csr_as_usize!(0x341, __write_mepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mepc.rs:4:1
    |
4   | write_csr_as_usize!(0x341, __write_mepc);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mip.rs:73:1
   |
73 | read_csr_as!(Mip, 0x344, __read_mip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mip.rs:73:1
   |
73 | read_csr_as!(Mip, 0x344, __read_mip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mip.rs:73:1
   |
73 | read_csr_as!(Mip, 0x344, __read_mip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mip.rs:74:1
    |
74  | set!(0x344, __set_mip);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mip.rs:74:1
    |
74  | set!(0x344, __set_mip);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mip.rs:74:1
    |
74  | set!(0x344, __set_mip);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mip.rs:75:1
    |
75  | clear!(0x344, __clear_mip);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mip.rs:75:1
    |
75  | clear!(0x344, __clear_mip);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mip.rs:75:1
    |
75  | clear!(0x344, __clear_mip);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/mscratch.rs:3:1
  |
3 | read_csr_as_usize!(0x340, __read_mscratch);
  | ------------------------------------------ in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mscratch.rs:3:1
   |
3  | read_csr_as_usize!(0x340, __read_mscratch);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mscratch.rs:3:1
   |
3  | read_csr_as_usize!(0x340, __read_mscratch);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x340, __write_mscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x340, __write_mscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mscratch.rs:4:1
    |
4   | write_csr_as_usize!(0x340, __write_mscratch);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/mtval.rs:3:1
  |
3 | read_csr_as_usize!(0x343, __read_mtval);
  | --------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mtval.rs:3:1
   |
3  | read_csr_as_usize!(0x343, __read_mtval);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mtval.rs:3:1
   |
3  | read_csr_as_usize!(0x343, __read_mtval);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/pmpcfgx.rs:3:5
  |
3 |     read_csr_as_usize!(0x3A0, __read_pmpcfg0);
  |     ----------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpcfgx.rs:3:5
   |
3  |     read_csr_as_usize!(0x3A0, __read_pmpcfg0);
   |     ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpcfgx.rs:3:5
   |
3  |     read_csr_as_usize!(0x3A0, __read_pmpcfg0);
   |     ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpcfgx.rs:4:5
    |
4   |     write_csr_as_usize!(0x3A0, __write_pmpcfg0);
    |     ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpcfgx.rs:4:5
    |
4   |     write_csr_as_usize!(0x3A0, __write_pmpcfg0);
    |     ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpcfgx.rs:4:5
    |
4   |     write_csr_as_usize!(0x3A0, __write_pmpcfg0);
    |     ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/pmpcfgx.rs:9:5
   |
9  |     read_csr_as_usize_rv32!(0x3A1, __read_pmpcfg1);
   |     ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/pmpcfgx.rs:9:5
   |
9  |     read_csr_as_usize_rv32!(0x3A1, __read_pmpcfg1);
   |     ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/pmpcfgx.rs:9:5
   |
9  |     read_csr_as_usize_rv32!(0x3A1, __read_pmpcfg1);
   |     ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/pmpcfgx.rs:10:5
    |
10  |     write_csr_as_usize_rv32!(0x3A1, __write_pmpcfg1);
    |     ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `write_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/pmpcfgx.rs:10:5
    |
10  |     write_csr_as_usize_rv32!(0x3A1, __write_pmpcfg1);
    |     ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `write_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/pmpcfgx.rs:10:5
    |
10  |     write_csr_as_usize_rv32!(0x3A1, __write_pmpcfg1);
    |     ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `write_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpcfgx.rs:15:5
   |
15 |     read_csr_as_usize!(0x3A2, __read_pmpcfg2);
   |     ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpcfgx.rs:15:5
   |
15 |     read_csr_as_usize!(0x3A2, __read_pmpcfg2);
   |     ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpcfgx.rs:15:5
   |
15 |     read_csr_as_usize!(0x3A2, __read_pmpcfg2);
   |     ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpcfgx.rs:16:5
    |
16  |     write_csr_as_usize!(0x3A2, __write_pmpcfg2);
    |     ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpcfgx.rs:16:5
    |
16  |     write_csr_as_usize!(0x3A2, __write_pmpcfg2);
    |     ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpcfgx.rs:16:5
    |
16  |     write_csr_as_usize!(0x3A2, __write_pmpcfg2);
    |     ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/pmpcfgx.rs:21:5
   |
21 |     read_csr_as_usize_rv32!(0x3A3, __read_pmpcfg3);
   |     ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/pmpcfgx.rs:21:5
   |
21 |     read_csr_as_usize_rv32!(0x3A3, __read_pmpcfg3);
   |     ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/pmpcfgx.rs:21:5
   |
21 |     read_csr_as_usize_rv32!(0x3A3, __read_pmpcfg3);
   |     ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/pmpcfgx.rs:22:5
    |
22  |     write_csr_as_usize_rv32!(0x3A3, __write_pmpcfg3);
    |     ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `write_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/pmpcfgx.rs:22:5
    |
22  |     write_csr_as_usize_rv32!(0x3A3, __write_pmpcfg3);
    |     ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `write_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/pmpcfgx.rs:22:5
    |
22  |     write_csr_as_usize_rv32!(0x3A3, __write_pmpcfg3);
    |     ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `write_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:13:1
   |
13 | reg!(0x3B0, pmpaddr0, __read_pmpaddr0, __write_pmpaddr0);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:13:1
   |
13 | reg!(0x3B0, pmpaddr0, __read_pmpaddr0, __write_pmpaddr0);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:13:1
   |
13 | reg!(0x3B0, pmpaddr0, __read_pmpaddr0, __write_pmpaddr0);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:13:1
    |
13  | reg!(0x3B0, pmpaddr0, __read_pmpaddr0, __write_pmpaddr0);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:13:1
    |
13  | reg!(0x3B0, pmpaddr0, __read_pmpaddr0, __write_pmpaddr0);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:13:1
    |
13  | reg!(0x3B0, pmpaddr0, __read_pmpaddr0, __write_pmpaddr0);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:14:1
   |
14 | reg!(0x3B1, pmpaddr1, __read_pmpaddr1, __write_pmpaddr1);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:14:1
   |
14 | reg!(0x3B1, pmpaddr1, __read_pmpaddr1, __write_pmpaddr1);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:14:1
   |
14 | reg!(0x3B1, pmpaddr1, __read_pmpaddr1, __write_pmpaddr1);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:14:1
    |
14  | reg!(0x3B1, pmpaddr1, __read_pmpaddr1, __write_pmpaddr1);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:14:1
    |
14  | reg!(0x3B1, pmpaddr1, __read_pmpaddr1, __write_pmpaddr1);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:14:1
    |
14  | reg!(0x3B1, pmpaddr1, __read_pmpaddr1, __write_pmpaddr1);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:15:1
   |
15 | reg!(0x3B2, pmpaddr2, __read_pmpaddr2, __write_pmpaddr2);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:15:1
   |
15 | reg!(0x3B2, pmpaddr2, __read_pmpaddr2, __write_pmpaddr2);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:15:1
   |
15 | reg!(0x3B2, pmpaddr2, __read_pmpaddr2, __write_pmpaddr2);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:15:1
    |
15  | reg!(0x3B2, pmpaddr2, __read_pmpaddr2, __write_pmpaddr2);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:15:1
    |
15  | reg!(0x3B2, pmpaddr2, __read_pmpaddr2, __write_pmpaddr2);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:15:1
    |
15  | reg!(0x3B2, pmpaddr2, __read_pmpaddr2, __write_pmpaddr2);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:16:1
   |
16 | reg!(0x3B3, pmpaddr3, __read_pmpaddr3, __write_pmpaddr3);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:16:1
   |
16 | reg!(0x3B3, pmpaddr3, __read_pmpaddr3, __write_pmpaddr3);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:16:1
   |
16 | reg!(0x3B3, pmpaddr3, __read_pmpaddr3, __write_pmpaddr3);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:16:1
    |
16  | reg!(0x3B3, pmpaddr3, __read_pmpaddr3, __write_pmpaddr3);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:16:1
    |
16  | reg!(0x3B3, pmpaddr3, __read_pmpaddr3, __write_pmpaddr3);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:16:1
    |
16  | reg!(0x3B3, pmpaddr3, __read_pmpaddr3, __write_pmpaddr3);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:17:1
   |
17 | reg!(0x3B4, pmpaddr4, __read_pmpaddr4, __write_pmpaddr4);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:17:1
   |
17 | reg!(0x3B4, pmpaddr4, __read_pmpaddr4, __write_pmpaddr4);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:17:1
   |
17 | reg!(0x3B4, pmpaddr4, __read_pmpaddr4, __write_pmpaddr4);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:17:1
    |
17  | reg!(0x3B4, pmpaddr4, __read_pmpaddr4, __write_pmpaddr4);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:17:1
    |
17  | reg!(0x3B4, pmpaddr4, __read_pmpaddr4, __write_pmpaddr4);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:17:1
    |
17  | reg!(0x3B4, pmpaddr4, __read_pmpaddr4, __write_pmpaddr4);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:18:1
   |
18 | reg!(0x3B5, pmpaddr5, __read_pmpaddr5, __write_pmpaddr5);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:18:1
   |
18 | reg!(0x3B5, pmpaddr5, __read_pmpaddr5, __write_pmpaddr5);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:18:1
   |
18 | reg!(0x3B5, pmpaddr5, __read_pmpaddr5, __write_pmpaddr5);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:18:1
    |
18  | reg!(0x3B5, pmpaddr5, __read_pmpaddr5, __write_pmpaddr5);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:18:1
    |
18  | reg!(0x3B5, pmpaddr5, __read_pmpaddr5, __write_pmpaddr5);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:18:1
    |
18  | reg!(0x3B5, pmpaddr5, __read_pmpaddr5, __write_pmpaddr5);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:19:1
   |
19 | reg!(0x3B6, pmpaddr6, __read_pmpaddr6, __write_pmpaddr6);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:19:1
   |
19 | reg!(0x3B6, pmpaddr6, __read_pmpaddr6, __write_pmpaddr6);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:19:1
   |
19 | reg!(0x3B6, pmpaddr6, __read_pmpaddr6, __write_pmpaddr6);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:19:1
    |
19  | reg!(0x3B6, pmpaddr6, __read_pmpaddr6, __write_pmpaddr6);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:19:1
    |
19  | reg!(0x3B6, pmpaddr6, __read_pmpaddr6, __write_pmpaddr6);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:19:1
    |
19  | reg!(0x3B6, pmpaddr6, __read_pmpaddr6, __write_pmpaddr6);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:20:1
   |
20 | reg!(0x3B7, pmpaddr7, __read_pmpaddr7, __write_pmpaddr7);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:20:1
   |
20 | reg!(0x3B7, pmpaddr7, __read_pmpaddr7, __write_pmpaddr7);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:20:1
   |
20 | reg!(0x3B7, pmpaddr7, __read_pmpaddr7, __write_pmpaddr7);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:20:1
    |
20  | reg!(0x3B7, pmpaddr7, __read_pmpaddr7, __write_pmpaddr7);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:20:1
    |
20  | reg!(0x3B7, pmpaddr7, __read_pmpaddr7, __write_pmpaddr7);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:20:1
    |
20  | reg!(0x3B7, pmpaddr7, __read_pmpaddr7, __write_pmpaddr7);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:21:1
   |
21 | reg!(0x3B8, pmpaddr8, __read_pmpaddr8, __write_pmpaddr8);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:21:1
   |
21 | reg!(0x3B8, pmpaddr8, __read_pmpaddr8, __write_pmpaddr8);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:21:1
   |
21 | reg!(0x3B8, pmpaddr8, __read_pmpaddr8, __write_pmpaddr8);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:21:1
    |
21  | reg!(0x3B8, pmpaddr8, __read_pmpaddr8, __write_pmpaddr8);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:21:1
    |
21  | reg!(0x3B8, pmpaddr8, __read_pmpaddr8, __write_pmpaddr8);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:21:1
    |
21  | reg!(0x3B8, pmpaddr8, __read_pmpaddr8, __write_pmpaddr8);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:22:1
   |
22 | reg!(0x3B9, pmpaddr9, __read_pmpaddr9, __write_pmpaddr9);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:22:1
   |
22 | reg!(0x3B9, pmpaddr9, __read_pmpaddr9, __write_pmpaddr9);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:22:1
   |
22 | reg!(0x3B9, pmpaddr9, __read_pmpaddr9, __write_pmpaddr9);
   | -------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:22:1
    |
22  | reg!(0x3B9, pmpaddr9, __read_pmpaddr9, __write_pmpaddr9);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:22:1
    |
22  | reg!(0x3B9, pmpaddr9, __read_pmpaddr9, __write_pmpaddr9);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:22:1
    |
22  | reg!(0x3B9, pmpaddr9, __read_pmpaddr9, __write_pmpaddr9);
    | -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:23:1
   |
23 | reg!(0x3BA, pmpaddr10, __read_pmpaddr10, __write_pmpaddr10);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:23:1
   |
23 | reg!(0x3BA, pmpaddr10, __read_pmpaddr10, __write_pmpaddr10);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:23:1
   |
23 | reg!(0x3BA, pmpaddr10, __read_pmpaddr10, __write_pmpaddr10);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:23:1
    |
23  | reg!(0x3BA, pmpaddr10, __read_pmpaddr10, __write_pmpaddr10);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:23:1
    |
23  | reg!(0x3BA, pmpaddr10, __read_pmpaddr10, __write_pmpaddr10);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:23:1
    |
23  | reg!(0x3BA, pmpaddr10, __read_pmpaddr10, __write_pmpaddr10);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:24:1
   |
24 | reg!(0x3BB, pmpaddr11, __read_pmpaddr11, __write_pmpaddr11);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:24:1
   |
24 | reg!(0x3BB, pmpaddr11, __read_pmpaddr11, __write_pmpaddr11);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:24:1
   |
24 | reg!(0x3BB, pmpaddr11, __read_pmpaddr11, __write_pmpaddr11);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:24:1
    |
24  | reg!(0x3BB, pmpaddr11, __read_pmpaddr11, __write_pmpaddr11);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:24:1
    |
24  | reg!(0x3BB, pmpaddr11, __read_pmpaddr11, __write_pmpaddr11);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:24:1
    |
24  | reg!(0x3BB, pmpaddr11, __read_pmpaddr11, __write_pmpaddr11);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:25:1
   |
25 | reg!(0x3BC, pmpaddr12, __read_pmpaddr12, __write_pmpaddr12);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:25:1
   |
25 | reg!(0x3BC, pmpaddr12, __read_pmpaddr12, __write_pmpaddr12);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:25:1
   |
25 | reg!(0x3BC, pmpaddr12, __read_pmpaddr12, __write_pmpaddr12);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:25:1
    |
25  | reg!(0x3BC, pmpaddr12, __read_pmpaddr12, __write_pmpaddr12);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:25:1
    |
25  | reg!(0x3BC, pmpaddr12, __read_pmpaddr12, __write_pmpaddr12);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:25:1
    |
25  | reg!(0x3BC, pmpaddr12, __read_pmpaddr12, __write_pmpaddr12);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:26:1
   |
26 | reg!(0x3BD, pmpaddr13, __read_pmpaddr13, __write_pmpaddr13);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:26:1
   |
26 | reg!(0x3BD, pmpaddr13, __read_pmpaddr13, __write_pmpaddr13);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:26:1
   |
26 | reg!(0x3BD, pmpaddr13, __read_pmpaddr13, __write_pmpaddr13);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:26:1
    |
26  | reg!(0x3BD, pmpaddr13, __read_pmpaddr13, __write_pmpaddr13);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:26:1
    |
26  | reg!(0x3BD, pmpaddr13, __read_pmpaddr13, __write_pmpaddr13);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:26:1
    |
26  | reg!(0x3BD, pmpaddr13, __read_pmpaddr13, __write_pmpaddr13);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:27:1
   |
27 | reg!(0x3BE, pmpaddr14, __read_pmpaddr14, __write_pmpaddr14);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:27:1
   |
27 | reg!(0x3BE, pmpaddr14, __read_pmpaddr14, __write_pmpaddr14);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:27:1
   |
27 | reg!(0x3BE, pmpaddr14, __read_pmpaddr14, __write_pmpaddr14);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:27:1
    |
27  | reg!(0x3BE, pmpaddr14, __read_pmpaddr14, __write_pmpaddr14);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:27:1
    |
27  | reg!(0x3BE, pmpaddr14, __read_pmpaddr14, __write_pmpaddr14);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:27:1
    |
27  | reg!(0x3BE, pmpaddr14, __read_pmpaddr14, __write_pmpaddr14);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:28:1
   |
28 | reg!(0x3BF, pmpaddr15, __read_pmpaddr15, __write_pmpaddr15);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:28:1
   |
28 | reg!(0x3BF, pmpaddr15, __read_pmpaddr15, __write_pmpaddr15);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/pmpaddrx.rs:28:1
   |
28 | reg!(0x3BF, pmpaddr15, __read_pmpaddr15, __write_pmpaddr15);
   | ----------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:28:1
    |
28  | reg!(0x3BF, pmpaddr15, __read_pmpaddr15, __write_pmpaddr15);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:28:1
    |
28  | reg!(0x3BF, pmpaddr15, __read_pmpaddr15, __write_pmpaddr15);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/pmpaddrx.rs:28:1
    |
28  | reg!(0x3BF, pmpaddr15, __read_pmpaddr15, __write_pmpaddr15);
    | ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/mcycle.rs:3:1
  |
3 | read_csr_as_usize!(0xB00, __read_mcycle);
  | ---------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mcycle.rs:3:1
   |
3  | read_csr_as_usize!(0xB00, __read_mcycle);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mcycle.rs:3:1
   |
3  | read_csr_as_usize!(0xB00, __read_mcycle);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mcycle.rs:4:1
    |
4   | read_composite_csr!(super::mcycleh::read(), read());
    | --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mcycle.rs:4:1
    |
4   | read_composite_csr!(super::mcycleh::read(), read());
    | --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:26:1
   |
26 | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:26:1
   |
26 | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:26:1
   |
26 | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:26:1
    |
26  | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:26:1
    |
26  | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:26:1
    |
26  | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:26:1
    |
26  | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:26:1
    |
26  | reg!(0xB03, mhpmcounter3,  mhpmcounter3h,  __read_mhpmcounter3,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:27:1
   |
27 | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:27:1
   |
27 | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:27:1
   |
27 | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:27:1
    |
27  | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:27:1
    |
27  | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:27:1
    |
27  | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:27:1
    |
27  | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:27:1
    |
27  | reg!(0xB04, mhpmcounter4,  mhpmcounter4h,  __read_mhpmcounter4,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:28:1
   |
28 | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:28:1
   |
28 | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:28:1
   |
28 | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:28:1
    |
28  | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:28:1
    |
28  | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:28:1
    |
28  | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:28:1
    |
28  | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:28:1
    |
28  | reg!(0xB05, mhpmcounter5,  mhpmcounter5h,  __read_mhpmcounter5,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:29:1
   |
29 | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:29:1
   |
29 | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:29:1
   |
29 | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:29:1
    |
29  | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:29:1
    |
29  | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:29:1
    |
29  | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:29:1
    |
29  | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:29:1
    |
29  | reg!(0xB06, mhpmcounter6,  mhpmcounter6h,  __read_mhpmcounter6,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:30:1
   |
30 | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:30:1
   |
30 | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:30:1
   |
30 | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:30:1
    |
30  | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:30:1
    |
30  | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:30:1
    |
30  | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:30:1
    |
30  | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:30:1
    |
30  | reg!(0xB07, mhpmcounter7,  mhpmcounter7h,  __read_mhpmcounter7,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:31:1
   |
31 | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:31:1
   |
31 | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:31:1
   |
31 | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:31:1
    |
31  | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:31:1
    |
31  | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:31:1
    |
31  | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:31:1
    |
31  | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:31:1
    |
31  | reg!(0xB08, mhpmcounter8,  mhpmcounter8h,  __read_mhpmcounter8,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:32:1
   |
32 | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:32:1
   |
32 | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:32:1
   |
32 | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
   | -------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:32:1
    |
32  | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:32:1
    |
32  | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:32:1
    |
32  | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:32:1
    |
32  | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:32:1
    |
32  | reg!(0xB09, mhpmcounter9,  mhpmcounter9h,  __read_mhpmcounter9,  __write_mhpmcounter...
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:33:1
   |
33 | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:33:1
   |
33 | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:33:1
   |
33 | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:33:1
    |
33  | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:33:1
    |
33  | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:33:1
    |
33  | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:33:1
    |
33  | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:33:1
    |
33  | reg!(0xB0A, mhpmcounter10, mhpmcounter10h, __read_mhpmcounter10, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:34:1
   |
34 | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:34:1
   |
34 | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:34:1
   |
34 | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:34:1
    |
34  | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:34:1
    |
34  | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:34:1
    |
34  | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:34:1
    |
34  | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:34:1
    |
34  | reg!(0xB0B, mhpmcounter11, mhpmcounter11h, __read_mhpmcounter11, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:35:1
   |
35 | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:35:1
   |
35 | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:35:1
   |
35 | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:35:1
    |
35  | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:35:1
    |
35  | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:35:1
    |
35  | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:35:1
    |
35  | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:35:1
    |
35  | reg!(0xB0C, mhpmcounter12, mhpmcounter12h, __read_mhpmcounter12, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:36:1
   |
36 | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:36:1
   |
36 | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:36:1
   |
36 | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:36:1
    |
36  | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:36:1
    |
36  | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:36:1
    |
36  | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:36:1
    |
36  | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:36:1
    |
36  | reg!(0xB0D, mhpmcounter13, mhpmcounter13h, __read_mhpmcounter13, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:37:1
   |
37 | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:37:1
   |
37 | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:37:1
   |
37 | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:37:1
    |
37  | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:37:1
    |
37  | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:37:1
    |
37  | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:37:1
    |
37  | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:37:1
    |
37  | reg!(0xB0E, mhpmcounter14, mhpmcounter14h, __read_mhpmcounter14, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:38:1
   |
38 | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:38:1
   |
38 | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:38:1
   |
38 | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:38:1
    |
38  | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:38:1
    |
38  | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:38:1
    |
38  | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:38:1
    |
38  | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:38:1
    |
38  | reg!(0xB0F, mhpmcounter15, mhpmcounter15h, __read_mhpmcounter15, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:39:1
   |
39 | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:39:1
   |
39 | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:39:1
   |
39 | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:39:1
    |
39  | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:39:1
    |
39  | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:39:1
    |
39  | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:39:1
    |
39  | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:39:1
    |
39  | reg!(0xB10, mhpmcounter16, mhpmcounter16h, __read_mhpmcounter16, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:40:1
   |
40 | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:40:1
   |
40 | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:40:1
   |
40 | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:40:1
    |
40  | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:40:1
    |
40  | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:40:1
    |
40  | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:40:1
    |
40  | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:40:1
    |
40  | reg!(0xB11, mhpmcounter17, mhpmcounter17h, __read_mhpmcounter17, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:41:1
   |
41 | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:41:1
   |
41 | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:41:1
   |
41 | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:41:1
    |
41  | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:41:1
    |
41  | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:41:1
    |
41  | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:41:1
    |
41  | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:41:1
    |
41  | reg!(0xB12, mhpmcounter18, mhpmcounter18h, __read_mhpmcounter18, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:42:1
   |
42 | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:42:1
   |
42 | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:42:1
   |
42 | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:42:1
    |
42  | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:42:1
    |
42  | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:42:1
    |
42  | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:42:1
    |
42  | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:42:1
    |
42  | reg!(0xB13, mhpmcounter19, mhpmcounter19h, __read_mhpmcounter19, __write_mhpmcounter1...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:43:1
   |
43 | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:43:1
   |
43 | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:43:1
   |
43 | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:43:1
    |
43  | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:43:1
    |
43  | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:43:1
    |
43  | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:43:1
    |
43  | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:43:1
    |
43  | reg!(0xB14, mhpmcounter20, mhpmcounter20h, __read_mhpmcounter20, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:44:1
   |
44 | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:44:1
   |
44 | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:44:1
   |
44 | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:44:1
    |
44  | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:44:1
    |
44  | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:44:1
    |
44  | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:44:1
    |
44  | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:44:1
    |
44  | reg!(0xB15, mhpmcounter21, mhpmcounter21h, __read_mhpmcounter21, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:45:1
   |
45 | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:45:1
   |
45 | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:45:1
   |
45 | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:45:1
    |
45  | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:45:1
    |
45  | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:45:1
    |
45  | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:45:1
    |
45  | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:45:1
    |
45  | reg!(0xB16, mhpmcounter22, mhpmcounter22h, __read_mhpmcounter22, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:46:1
   |
46 | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:46:1
   |
46 | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:46:1
   |
46 | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:46:1
    |
46  | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:46:1
    |
46  | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:46:1
    |
46  | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:46:1
    |
46  | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:46:1
    |
46  | reg!(0xB17, mhpmcounter23, mhpmcounter23h, __read_mhpmcounter23, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:47:1
   |
47 | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:47:1
   |
47 | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:47:1
   |
47 | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:47:1
    |
47  | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:47:1
    |
47  | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:47:1
    |
47  | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:47:1
    |
47  | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:47:1
    |
47  | reg!(0xB18, mhpmcounter24, mhpmcounter24h, __read_mhpmcounter24, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:48:1
   |
48 | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:48:1
   |
48 | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:48:1
   |
48 | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:48:1
    |
48  | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:48:1
    |
48  | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:48:1
    |
48  | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:48:1
    |
48  | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:48:1
    |
48  | reg!(0xB19, mhpmcounter25, mhpmcounter25h, __read_mhpmcounter25, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:49:1
   |
49 | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:49:1
   |
49 | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:49:1
   |
49 | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:49:1
    |
49  | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:49:1
    |
49  | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:49:1
    |
49  | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:49:1
    |
49  | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:49:1
    |
49  | reg!(0xB1A, mhpmcounter26, mhpmcounter26h, __read_mhpmcounter26, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:50:1
   |
50 | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:50:1
   |
50 | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:50:1
   |
50 | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:50:1
    |
50  | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:50:1
    |
50  | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:50:1
    |
50  | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:50:1
    |
50  | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:50:1
    |
50  | reg!(0xB1B, mhpmcounter27, mhpmcounter27h, __read_mhpmcounter27, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:51:1
   |
51 | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:51:1
   |
51 | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:51:1
   |
51 | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:51:1
    |
51  | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:51:1
    |
51  | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:51:1
    |
51  | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:51:1
    |
51  | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:51:1
    |
51  | reg!(0xB1C, mhpmcounter28, mhpmcounter28h, __read_mhpmcounter28, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:52:1
   |
52 | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:52:1
   |
52 | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:52:1
   |
52 | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:52:1
    |
52  | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:52:1
    |
52  | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:52:1
    |
52  | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:52:1
    |
52  | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:52:1
    |
52  | reg!(0xB1D, mhpmcounter29, mhpmcounter29h, __read_mhpmcounter29, __write_mhpmcounter2...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:53:1
   |
53 | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:53:1
   |
53 | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:53:1
   |
53 | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:53:1
    |
53  | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:53:1
    |
53  | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:53:1
    |
53  | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:53:1
    |
53  | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:53:1
    |
53  | reg!(0xB1E, mhpmcounter30, mhpmcounter30h, __read_mhpmcounter30, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:54:1
   |
54 | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:54:1
   |
54 | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmcounterx.rs:54:1
   |
54 | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
   | --------------------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:54:1
    |
54  | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:54:1
    |
54  | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmcounterx.rs:54:1
    |
54  | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:54:1
    |
54  | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:54:1
    |
54  | reg!(0xB1F, mhpmcounter31, mhpmcounter31h, __read_mhpmcounter31, __write_mhpmcounter3...
    | --------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:56:1
   |
56 | regh!(0xB83, mhpmcounter3h,  __read_mhpmcounter3h,  __write_mhpmcounter3h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:56:1
   |
56 | regh!(0xB83, mhpmcounter3h,  __read_mhpmcounter3h,  __write_mhpmcounter3h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:56:1
   |
56 | regh!(0xB83, mhpmcounter3h,  __read_mhpmcounter3h,  __write_mhpmcounter3h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:56:1
    |
56  | regh!(0xB83, mhpmcounter3h,  __read_mhpmcounter3h,  __write_mhpmcounter3...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:56:1
    |
56  | regh!(0xB83, mhpmcounter3h,  __read_mhpmcounter3h,  __write_mhpmcounter3...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:56:1
    |
56  | regh!(0xB83, mhpmcounter3h,  __read_mhpmcounter3h,  __write_mhpmcounter3...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:57:1
   |
57 | regh!(0xB84, mhpmcounter4h,  __read_mhpmcounter4h,  __write_mhpmcounter4h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:57:1
   |
57 | regh!(0xB84, mhpmcounter4h,  __read_mhpmcounter4h,  __write_mhpmcounter4h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:57:1
   |
57 | regh!(0xB84, mhpmcounter4h,  __read_mhpmcounter4h,  __write_mhpmcounter4h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:57:1
    |
57  | regh!(0xB84, mhpmcounter4h,  __read_mhpmcounter4h,  __write_mhpmcounter4...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:57:1
    |
57  | regh!(0xB84, mhpmcounter4h,  __read_mhpmcounter4h,  __write_mhpmcounter4...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:57:1
    |
57  | regh!(0xB84, mhpmcounter4h,  __read_mhpmcounter4h,  __write_mhpmcounter4...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:58:1
   |
58 | regh!(0xB85, mhpmcounter5h,  __read_mhpmcounter5h,  __write_mhpmcounter5h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:58:1
   |
58 | regh!(0xB85, mhpmcounter5h,  __read_mhpmcounter5h,  __write_mhpmcounter5h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:58:1
   |
58 | regh!(0xB85, mhpmcounter5h,  __read_mhpmcounter5h,  __write_mhpmcounter5h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:58:1
    |
58  | regh!(0xB85, mhpmcounter5h,  __read_mhpmcounter5h,  __write_mhpmcounter5...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:58:1
    |
58  | regh!(0xB85, mhpmcounter5h,  __read_mhpmcounter5h,  __write_mhpmcounter5...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:58:1
    |
58  | regh!(0xB85, mhpmcounter5h,  __read_mhpmcounter5h,  __write_mhpmcounter5...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:59:1
   |
59 | regh!(0xB86, mhpmcounter6h,  __read_mhpmcounter6h,  __write_mhpmcounter6h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:59:1
   |
59 | regh!(0xB86, mhpmcounter6h,  __read_mhpmcounter6h,  __write_mhpmcounter6h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:59:1
   |
59 | regh!(0xB86, mhpmcounter6h,  __read_mhpmcounter6h,  __write_mhpmcounter6h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:59:1
    |
59  | regh!(0xB86, mhpmcounter6h,  __read_mhpmcounter6h,  __write_mhpmcounter6...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:59:1
    |
59  | regh!(0xB86, mhpmcounter6h,  __read_mhpmcounter6h,  __write_mhpmcounter6...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:59:1
    |
59  | regh!(0xB86, mhpmcounter6h,  __read_mhpmcounter6h,  __write_mhpmcounter6...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:60:1
   |
60 | regh!(0xB87, mhpmcounter7h,  __read_mhpmcounter7h,  __write_mhpmcounter7h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:60:1
   |
60 | regh!(0xB87, mhpmcounter7h,  __read_mhpmcounter7h,  __write_mhpmcounter7h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:60:1
   |
60 | regh!(0xB87, mhpmcounter7h,  __read_mhpmcounter7h,  __write_mhpmcounter7h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:60:1
    |
60  | regh!(0xB87, mhpmcounter7h,  __read_mhpmcounter7h,  __write_mhpmcounter7...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:60:1
    |
60  | regh!(0xB87, mhpmcounter7h,  __read_mhpmcounter7h,  __write_mhpmcounter7...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:60:1
    |
60  | regh!(0xB87, mhpmcounter7h,  __read_mhpmcounter7h,  __write_mhpmcounter7...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:61:1
   |
61 | regh!(0xB88, mhpmcounter8h,  __read_mhpmcounter8h,  __write_mhpmcounter8h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:61:1
   |
61 | regh!(0xB88, mhpmcounter8h,  __read_mhpmcounter8h,  __write_mhpmcounter8h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:61:1
   |
61 | regh!(0xB88, mhpmcounter8h,  __read_mhpmcounter8h,  __write_mhpmcounter8h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:61:1
    |
61  | regh!(0xB88, mhpmcounter8h,  __read_mhpmcounter8h,  __write_mhpmcounter8...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:61:1
    |
61  | regh!(0xB88, mhpmcounter8h,  __read_mhpmcounter8h,  __write_mhpmcounter8...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:61:1
    |
61  | regh!(0xB88, mhpmcounter8h,  __read_mhpmcounter8h,  __write_mhpmcounter8...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:62:1
   |
62 | regh!(0xB89, mhpmcounter9h,  __read_mhpmcounter9h,  __write_mhpmcounter9h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:62:1
   |
62 | regh!(0xB89, mhpmcounter9h,  __read_mhpmcounter9h,  __write_mhpmcounter9h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:62:1
   |
62 | regh!(0xB89, mhpmcounter9h,  __read_mhpmcounter9h,  __write_mhpmcounter9h);
   | -------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:62:1
    |
62  | regh!(0xB89, mhpmcounter9h,  __read_mhpmcounter9h,  __write_mhpmcounter9...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:62:1
    |
62  | regh!(0xB89, mhpmcounter9h,  __read_mhpmcounter9h,  __write_mhpmcounter9...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:62:1
    |
62  | regh!(0xB89, mhpmcounter9h,  __read_mhpmcounter9h,  __write_mhpmcounter9...
    | -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:63:1
   |
63 | regh!(0xB8A, mhpmcounter10h, __read_mhpmcounter10h, __write_mhpmcounter10...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:63:1
   |
63 | regh!(0xB8A, mhpmcounter10h, __read_mhpmcounter10h, __write_mhpmcounter10...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:63:1
   |
63 | regh!(0xB8A, mhpmcounter10h, __read_mhpmcounter10h, __write_mhpmcounter10...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:63:1
    |
63  | regh!(0xB8A, mhpmcounter10h, __read_mhpmcounter10h, __write_mhpmcounter10...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:63:1
    |
63  | regh!(0xB8A, mhpmcounter10h, __read_mhpmcounter10h, __write_mhpmcounter10...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:63:1
    |
63  | regh!(0xB8A, mhpmcounter10h, __read_mhpmcounter10h, __write_mhpmcounter10...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:64:1
   |
64 | regh!(0xB8B, mhpmcounter11h, __read_mhpmcounter11h, __write_mhpmcounter11...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:64:1
   |
64 | regh!(0xB8B, mhpmcounter11h, __read_mhpmcounter11h, __write_mhpmcounter11...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:64:1
   |
64 | regh!(0xB8B, mhpmcounter11h, __read_mhpmcounter11h, __write_mhpmcounter11...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:64:1
    |
64  | regh!(0xB8B, mhpmcounter11h, __read_mhpmcounter11h, __write_mhpmcounter11...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:64:1
    |
64  | regh!(0xB8B, mhpmcounter11h, __read_mhpmcounter11h, __write_mhpmcounter11...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:64:1
    |
64  | regh!(0xB8B, mhpmcounter11h, __read_mhpmcounter11h, __write_mhpmcounter11...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:65:1
   |
65 | regh!(0xB8C, mhpmcounter12h, __read_mhpmcounter12h, __write_mhpmcounter12...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:65:1
   |
65 | regh!(0xB8C, mhpmcounter12h, __read_mhpmcounter12h, __write_mhpmcounter12...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:65:1
   |
65 | regh!(0xB8C, mhpmcounter12h, __read_mhpmcounter12h, __write_mhpmcounter12...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:65:1
    |
65  | regh!(0xB8C, mhpmcounter12h, __read_mhpmcounter12h, __write_mhpmcounter12...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:65:1
    |
65  | regh!(0xB8C, mhpmcounter12h, __read_mhpmcounter12h, __write_mhpmcounter12...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:65:1
    |
65  | regh!(0xB8C, mhpmcounter12h, __read_mhpmcounter12h, __write_mhpmcounter12...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:66:1
   |
66 | regh!(0xB8D, mhpmcounter13h, __read_mhpmcounter13h, __write_mhpmcounter13...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:66:1
   |
66 | regh!(0xB8D, mhpmcounter13h, __read_mhpmcounter13h, __write_mhpmcounter13...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:66:1
   |
66 | regh!(0xB8D, mhpmcounter13h, __read_mhpmcounter13h, __write_mhpmcounter13...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:66:1
    |
66  | regh!(0xB8D, mhpmcounter13h, __read_mhpmcounter13h, __write_mhpmcounter13...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:66:1
    |
66  | regh!(0xB8D, mhpmcounter13h, __read_mhpmcounter13h, __write_mhpmcounter13...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:66:1
    |
66  | regh!(0xB8D, mhpmcounter13h, __read_mhpmcounter13h, __write_mhpmcounter13...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:67:1
   |
67 | regh!(0xB8E, mhpmcounter14h, __read_mhpmcounter14h, __write_mhpmcounter14...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:67:1
   |
67 | regh!(0xB8E, mhpmcounter14h, __read_mhpmcounter14h, __write_mhpmcounter14...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:67:1
   |
67 | regh!(0xB8E, mhpmcounter14h, __read_mhpmcounter14h, __write_mhpmcounter14...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:67:1
    |
67  | regh!(0xB8E, mhpmcounter14h, __read_mhpmcounter14h, __write_mhpmcounter14...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:67:1
    |
67  | regh!(0xB8E, mhpmcounter14h, __read_mhpmcounter14h, __write_mhpmcounter14...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:67:1
    |
67  | regh!(0xB8E, mhpmcounter14h, __read_mhpmcounter14h, __write_mhpmcounter14...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:68:1
   |
68 | regh!(0xB8F, mhpmcounter15h, __read_mhpmcounter15h, __write_mhpmcounter15...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:68:1
   |
68 | regh!(0xB8F, mhpmcounter15h, __read_mhpmcounter15h, __write_mhpmcounter15...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:68:1
   |
68 | regh!(0xB8F, mhpmcounter15h, __read_mhpmcounter15h, __write_mhpmcounter15...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:68:1
    |
68  | regh!(0xB8F, mhpmcounter15h, __read_mhpmcounter15h, __write_mhpmcounter15...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:68:1
    |
68  | regh!(0xB8F, mhpmcounter15h, __read_mhpmcounter15h, __write_mhpmcounter15...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:68:1
    |
68  | regh!(0xB8F, mhpmcounter15h, __read_mhpmcounter15h, __write_mhpmcounter15...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:69:1
   |
69 | regh!(0xB90, mhpmcounter16h, __read_mhpmcounter16h, __write_mhpmcounter16...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:69:1
   |
69 | regh!(0xB90, mhpmcounter16h, __read_mhpmcounter16h, __write_mhpmcounter16...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:69:1
   |
69 | regh!(0xB90, mhpmcounter16h, __read_mhpmcounter16h, __write_mhpmcounter16...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:69:1
    |
69  | regh!(0xB90, mhpmcounter16h, __read_mhpmcounter16h, __write_mhpmcounter16...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:69:1
    |
69  | regh!(0xB90, mhpmcounter16h, __read_mhpmcounter16h, __write_mhpmcounter16...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:69:1
    |
69  | regh!(0xB90, mhpmcounter16h, __read_mhpmcounter16h, __write_mhpmcounter16...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:70:1
   |
70 | regh!(0xB91, mhpmcounter17h, __read_mhpmcounter17h, __write_mhpmcounter17...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:70:1
   |
70 | regh!(0xB91, mhpmcounter17h, __read_mhpmcounter17h, __write_mhpmcounter17...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:70:1
   |
70 | regh!(0xB91, mhpmcounter17h, __read_mhpmcounter17h, __write_mhpmcounter17...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:70:1
    |
70  | regh!(0xB91, mhpmcounter17h, __read_mhpmcounter17h, __write_mhpmcounter17...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:70:1
    |
70  | regh!(0xB91, mhpmcounter17h, __read_mhpmcounter17h, __write_mhpmcounter17...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:70:1
    |
70  | regh!(0xB91, mhpmcounter17h, __read_mhpmcounter17h, __write_mhpmcounter17...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:71:1
   |
71 | regh!(0xB92, mhpmcounter18h, __read_mhpmcounter18h, __write_mhpmcounter18...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:71:1
   |
71 | regh!(0xB92, mhpmcounter18h, __read_mhpmcounter18h, __write_mhpmcounter18...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:71:1
   |
71 | regh!(0xB92, mhpmcounter18h, __read_mhpmcounter18h, __write_mhpmcounter18...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:71:1
    |
71  | regh!(0xB92, mhpmcounter18h, __read_mhpmcounter18h, __write_mhpmcounter18...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:71:1
    |
71  | regh!(0xB92, mhpmcounter18h, __read_mhpmcounter18h, __write_mhpmcounter18...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:71:1
    |
71  | regh!(0xB92, mhpmcounter18h, __read_mhpmcounter18h, __write_mhpmcounter18...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:72:1
   |
72 | regh!(0xB93, mhpmcounter19h, __read_mhpmcounter19h, __write_mhpmcounter19...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:72:1
   |
72 | regh!(0xB93, mhpmcounter19h, __read_mhpmcounter19h, __write_mhpmcounter19...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:72:1
   |
72 | regh!(0xB93, mhpmcounter19h, __read_mhpmcounter19h, __write_mhpmcounter19...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:72:1
    |
72  | regh!(0xB93, mhpmcounter19h, __read_mhpmcounter19h, __write_mhpmcounter19...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:72:1
    |
72  | regh!(0xB93, mhpmcounter19h, __read_mhpmcounter19h, __write_mhpmcounter19...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:72:1
    |
72  | regh!(0xB93, mhpmcounter19h, __read_mhpmcounter19h, __write_mhpmcounter19...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:73:1
   |
73 | regh!(0xB94, mhpmcounter20h, __read_mhpmcounter20h, __write_mhpmcounter20...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:73:1
   |
73 | regh!(0xB94, mhpmcounter20h, __read_mhpmcounter20h, __write_mhpmcounter20...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:73:1
   |
73 | regh!(0xB94, mhpmcounter20h, __read_mhpmcounter20h, __write_mhpmcounter20...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:73:1
    |
73  | regh!(0xB94, mhpmcounter20h, __read_mhpmcounter20h, __write_mhpmcounter20...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:73:1
    |
73  | regh!(0xB94, mhpmcounter20h, __read_mhpmcounter20h, __write_mhpmcounter20...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:73:1
    |
73  | regh!(0xB94, mhpmcounter20h, __read_mhpmcounter20h, __write_mhpmcounter20...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:74:1
   |
74 | regh!(0xB95, mhpmcounter21h, __read_mhpmcounter21h, __write_mhpmcounter21...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:74:1
   |
74 | regh!(0xB95, mhpmcounter21h, __read_mhpmcounter21h, __write_mhpmcounter21...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:74:1
   |
74 | regh!(0xB95, mhpmcounter21h, __read_mhpmcounter21h, __write_mhpmcounter21...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:74:1
    |
74  | regh!(0xB95, mhpmcounter21h, __read_mhpmcounter21h, __write_mhpmcounter21...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:74:1
    |
74  | regh!(0xB95, mhpmcounter21h, __read_mhpmcounter21h, __write_mhpmcounter21...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:74:1
    |
74  | regh!(0xB95, mhpmcounter21h, __read_mhpmcounter21h, __write_mhpmcounter21...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:75:1
   |
75 | regh!(0xB96, mhpmcounter22h, __read_mhpmcounter22h, __write_mhpmcounter22...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:75:1
   |
75 | regh!(0xB96, mhpmcounter22h, __read_mhpmcounter22h, __write_mhpmcounter22...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:75:1
   |
75 | regh!(0xB96, mhpmcounter22h, __read_mhpmcounter22h, __write_mhpmcounter22...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:75:1
    |
75  | regh!(0xB96, mhpmcounter22h, __read_mhpmcounter22h, __write_mhpmcounter22...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:75:1
    |
75  | regh!(0xB96, mhpmcounter22h, __read_mhpmcounter22h, __write_mhpmcounter22...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:75:1
    |
75  | regh!(0xB96, mhpmcounter22h, __read_mhpmcounter22h, __write_mhpmcounter22...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:76:1
   |
76 | regh!(0xB97, mhpmcounter23h, __read_mhpmcounter23h, __write_mhpmcounter23...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:76:1
   |
76 | regh!(0xB97, mhpmcounter23h, __read_mhpmcounter23h, __write_mhpmcounter23...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:76:1
   |
76 | regh!(0xB97, mhpmcounter23h, __read_mhpmcounter23h, __write_mhpmcounter23...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:76:1
    |
76  | regh!(0xB97, mhpmcounter23h, __read_mhpmcounter23h, __write_mhpmcounter23...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:76:1
    |
76  | regh!(0xB97, mhpmcounter23h, __read_mhpmcounter23h, __write_mhpmcounter23...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:76:1
    |
76  | regh!(0xB97, mhpmcounter23h, __read_mhpmcounter23h, __write_mhpmcounter23...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:77:1
   |
77 | regh!(0xB98, mhpmcounter24h, __read_mhpmcounter24h, __write_mhpmcounter24...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:77:1
   |
77 | regh!(0xB98, mhpmcounter24h, __read_mhpmcounter24h, __write_mhpmcounter24...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:77:1
   |
77 | regh!(0xB98, mhpmcounter24h, __read_mhpmcounter24h, __write_mhpmcounter24...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:77:1
    |
77  | regh!(0xB98, mhpmcounter24h, __read_mhpmcounter24h, __write_mhpmcounter24...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:77:1
    |
77  | regh!(0xB98, mhpmcounter24h, __read_mhpmcounter24h, __write_mhpmcounter24...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:77:1
    |
77  | regh!(0xB98, mhpmcounter24h, __read_mhpmcounter24h, __write_mhpmcounter24...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:78:1
   |
78 | regh!(0xB99, mhpmcounter25h, __read_mhpmcounter25h, __write_mhpmcounter25...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:78:1
   |
78 | regh!(0xB99, mhpmcounter25h, __read_mhpmcounter25h, __write_mhpmcounter25...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:78:1
   |
78 | regh!(0xB99, mhpmcounter25h, __read_mhpmcounter25h, __write_mhpmcounter25...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:78:1
    |
78  | regh!(0xB99, mhpmcounter25h, __read_mhpmcounter25h, __write_mhpmcounter25...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:78:1
    |
78  | regh!(0xB99, mhpmcounter25h, __read_mhpmcounter25h, __write_mhpmcounter25...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:78:1
    |
78  | regh!(0xB99, mhpmcounter25h, __read_mhpmcounter25h, __write_mhpmcounter25...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:79:1
   |
79 | regh!(0xB9A, mhpmcounter26h, __read_mhpmcounter26h, __write_mhpmcounter26...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:79:1
   |
79 | regh!(0xB9A, mhpmcounter26h, __read_mhpmcounter26h, __write_mhpmcounter26...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:79:1
   |
79 | regh!(0xB9A, mhpmcounter26h, __read_mhpmcounter26h, __write_mhpmcounter26...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:79:1
    |
79  | regh!(0xB9A, mhpmcounter26h, __read_mhpmcounter26h, __write_mhpmcounter26...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:79:1
    |
79  | regh!(0xB9A, mhpmcounter26h, __read_mhpmcounter26h, __write_mhpmcounter26...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:79:1
    |
79  | regh!(0xB9A, mhpmcounter26h, __read_mhpmcounter26h, __write_mhpmcounter26...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:80:1
   |
80 | regh!(0xB9B, mhpmcounter27h, __read_mhpmcounter27h, __write_mhpmcounter27...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:80:1
   |
80 | regh!(0xB9B, mhpmcounter27h, __read_mhpmcounter27h, __write_mhpmcounter27...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:80:1
   |
80 | regh!(0xB9B, mhpmcounter27h, __read_mhpmcounter27h, __write_mhpmcounter27...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:80:1
    |
80  | regh!(0xB9B, mhpmcounter27h, __read_mhpmcounter27h, __write_mhpmcounter27...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:80:1
    |
80  | regh!(0xB9B, mhpmcounter27h, __read_mhpmcounter27h, __write_mhpmcounter27...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:80:1
    |
80  | regh!(0xB9B, mhpmcounter27h, __read_mhpmcounter27h, __write_mhpmcounter27...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:81:1
   |
81 | regh!(0xB9C, mhpmcounter28h, __read_mhpmcounter28h, __write_mhpmcounter28...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:81:1
   |
81 | regh!(0xB9C, mhpmcounter28h, __read_mhpmcounter28h, __write_mhpmcounter28...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:81:1
   |
81 | regh!(0xB9C, mhpmcounter28h, __read_mhpmcounter28h, __write_mhpmcounter28...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:81:1
    |
81  | regh!(0xB9C, mhpmcounter28h, __read_mhpmcounter28h, __write_mhpmcounter28...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:81:1
    |
81  | regh!(0xB9C, mhpmcounter28h, __read_mhpmcounter28h, __write_mhpmcounter28...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:81:1
    |
81  | regh!(0xB9C, mhpmcounter28h, __read_mhpmcounter28h, __write_mhpmcounter28...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:82:1
   |
82 | regh!(0xB9D, mhpmcounter29h, __read_mhpmcounter29h, __write_mhpmcounter29...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:82:1
   |
82 | regh!(0xB9D, mhpmcounter29h, __read_mhpmcounter29h, __write_mhpmcounter29...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:82:1
   |
82 | regh!(0xB9D, mhpmcounter29h, __read_mhpmcounter29h, __write_mhpmcounter29...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:82:1
    |
82  | regh!(0xB9D, mhpmcounter29h, __read_mhpmcounter29h, __write_mhpmcounter29...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:82:1
    |
82  | regh!(0xB9D, mhpmcounter29h, __read_mhpmcounter29h, __write_mhpmcounter29...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:82:1
    |
82  | regh!(0xB9D, mhpmcounter29h, __read_mhpmcounter29h, __write_mhpmcounter29...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:83:1
   |
83 | regh!(0xB9E, mhpmcounter30h, __read_mhpmcounter30h, __write_mhpmcounter30...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:83:1
   |
83 | regh!(0xB9E, mhpmcounter30h, __read_mhpmcounter30h, __write_mhpmcounter30...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:83:1
   |
83 | regh!(0xB9E, mhpmcounter30h, __read_mhpmcounter30h, __write_mhpmcounter30...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:83:1
    |
83  | regh!(0xB9E, mhpmcounter30h, __read_mhpmcounter30h, __write_mhpmcounter30...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:83:1
    |
83  | regh!(0xB9E, mhpmcounter30h, __read_mhpmcounter30h, __write_mhpmcounter30...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:83:1
    |
83  | regh!(0xB9E, mhpmcounter30h, __read_mhpmcounter30h, __write_mhpmcounter30...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:84:1
   |
84 | regh!(0xB9F, mhpmcounter31h, __read_mhpmcounter31h, __write_mhpmcounter31...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:84:1
   |
84 | regh!(0xB9F, mhpmcounter31h, __read_mhpmcounter31h, __write_mhpmcounter31...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mhpmcounterx.rs:84:1
   |
84 | regh!(0xB9F, mhpmcounter31h, __read_mhpmcounter31h, __write_mhpmcounter31...
   | --------------------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:130:27
    |
130 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:84:1
    |
84  | regh!(0xB9F, mhpmcounter31h, __read_mhpmcounter31h, __write_mhpmcounter31...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:133:27
    |
133 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:84:1
    |
84  | regh!(0xB9F, mhpmcounter31h, __read_mhpmcounter31h, __write_mhpmcounter31...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:142:27
    |
142 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/mhpmcounterx.rs:84:1
    |
84  | regh!(0xB9F, mhpmcounter31h, __read_mhpmcounter31h, __write_mhpmcounter31...
    | --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr_rv32` which comes from the expansion of the macro `regh` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/minstret.rs:3:1
  |
3 | read_csr_as_usize!(0xB02, __read_minstret);
  | ------------------------------------------ in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/minstret.rs:3:1
   |
3  | read_csr_as_usize!(0xB02, __read_minstret);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/minstret.rs:3:1
   |
3  | read_csr_as_usize!(0xB02, __read_minstret);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/minstret.rs:4:1
    |
4   | read_composite_csr!(super::minstreth::read(), read());
    | ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/minstret.rs:4:1
    |
4   | read_composite_csr!(super::minstreth::read(), read());
    | ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mcycleh.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xB80, __read_mcycleh);
   | ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mcycleh.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xB80, __read_mcycleh);
   | ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/mcycleh.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xB80, __read_mcycleh);
   | ---------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:36:27
   |
36 |                 #[cfg(all(riscv32, feature = "inline-asm"))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/minstreth.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xB82, __read_minstreth);
   | ------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:43:27
   |
43 |                 #[cfg(all(riscv32, not(feature = "inline-asm")))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/minstreth.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xB82, __read_minstreth);
   | ------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
  --> riscv/src/register/macros.rs:52:27
   |
52 |                 #[cfg(not(riscv32))]
   |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
   |
  ::: riscv/src/register/minstreth.rs:3:1
   |
3  | read_csr_as_usize_rv32!(0xB82, __read_minstreth);
   | ------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr_rv32` which comes from the expansion of the macro `read_csr_as_usize_rv32` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:13:1
   |
13 | reg!(0x323, mhpmevent3, __read_mhpmevent3, __write_mhpmevent3);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:13:1
   |
13 | reg!(0x323, mhpmevent3, __read_mhpmevent3, __write_mhpmevent3);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:13:1
   |
13 | reg!(0x323, mhpmevent3, __read_mhpmevent3, __write_mhpmevent3);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:13:1
    |
13  | reg!(0x323, mhpmevent3, __read_mhpmevent3, __write_mhpmevent3);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:13:1
    |
13  | reg!(0x323, mhpmevent3, __read_mhpmevent3, __write_mhpmevent3);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:13:1
    |
13  | reg!(0x323, mhpmevent3, __read_mhpmevent3, __write_mhpmevent3);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:14:1
   |
14 | reg!(0x324, mhpmevent4, __read_mhpmevent4, __write_mhpmevent4);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:14:1
   |
14 | reg!(0x324, mhpmevent4, __read_mhpmevent4, __write_mhpmevent4);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:14:1
   |
14 | reg!(0x324, mhpmevent4, __read_mhpmevent4, __write_mhpmevent4);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:14:1
    |
14  | reg!(0x324, mhpmevent4, __read_mhpmevent4, __write_mhpmevent4);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:14:1
    |
14  | reg!(0x324, mhpmevent4, __read_mhpmevent4, __write_mhpmevent4);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:14:1
    |
14  | reg!(0x324, mhpmevent4, __read_mhpmevent4, __write_mhpmevent4);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:15:1
   |
15 | reg!(0x325, mhpmevent5, __read_mhpmevent5, __write_mhpmevent5);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:15:1
   |
15 | reg!(0x325, mhpmevent5, __read_mhpmevent5, __write_mhpmevent5);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:15:1
   |
15 | reg!(0x325, mhpmevent5, __read_mhpmevent5, __write_mhpmevent5);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:15:1
    |
15  | reg!(0x325, mhpmevent5, __read_mhpmevent5, __write_mhpmevent5);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:15:1
    |
15  | reg!(0x325, mhpmevent5, __read_mhpmevent5, __write_mhpmevent5);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:15:1
    |
15  | reg!(0x325, mhpmevent5, __read_mhpmevent5, __write_mhpmevent5);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:16:1
   |
16 | reg!(0x326, mhpmevent6, __read_mhpmevent6, __write_mhpmevent6);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:16:1
   |
16 | reg!(0x326, mhpmevent6, __read_mhpmevent6, __write_mhpmevent6);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:16:1
   |
16 | reg!(0x326, mhpmevent6, __read_mhpmevent6, __write_mhpmevent6);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:16:1
    |
16  | reg!(0x326, mhpmevent6, __read_mhpmevent6, __write_mhpmevent6);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:16:1
    |
16  | reg!(0x326, mhpmevent6, __read_mhpmevent6, __write_mhpmevent6);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:16:1
    |
16  | reg!(0x326, mhpmevent6, __read_mhpmevent6, __write_mhpmevent6);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:17:1
   |
17 | reg!(0x327, mhpmevent7, __read_mhpmevent7, __write_mhpmevent7);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:17:1
   |
17 | reg!(0x327, mhpmevent7, __read_mhpmevent7, __write_mhpmevent7);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:17:1
   |
17 | reg!(0x327, mhpmevent7, __read_mhpmevent7, __write_mhpmevent7);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:17:1
    |
17  | reg!(0x327, mhpmevent7, __read_mhpmevent7, __write_mhpmevent7);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:17:1
    |
17  | reg!(0x327, mhpmevent7, __read_mhpmevent7, __write_mhpmevent7);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:17:1
    |
17  | reg!(0x327, mhpmevent7, __read_mhpmevent7, __write_mhpmevent7);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:18:1
   |
18 | reg!(0x328, mhpmevent8, __read_mhpmevent8, __write_mhpmevent8);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:18:1
   |
18 | reg!(0x328, mhpmevent8, __read_mhpmevent8, __write_mhpmevent8);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:18:1
   |
18 | reg!(0x328, mhpmevent8, __read_mhpmevent8, __write_mhpmevent8);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:18:1
    |
18  | reg!(0x328, mhpmevent8, __read_mhpmevent8, __write_mhpmevent8);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:18:1
    |
18  | reg!(0x328, mhpmevent8, __read_mhpmevent8, __write_mhpmevent8);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:18:1
    |
18  | reg!(0x328, mhpmevent8, __read_mhpmevent8, __write_mhpmevent8);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:19:1
   |
19 | reg!(0x329, mhpmevent9, __read_mhpmevent9, __write_mhpmevent9);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:19:1
   |
19 | reg!(0x329, mhpmevent9, __read_mhpmevent9, __write_mhpmevent9);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:19:1
   |
19 | reg!(0x329, mhpmevent9, __read_mhpmevent9, __write_mhpmevent9);
   | -------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:19:1
    |
19  | reg!(0x329, mhpmevent9, __read_mhpmevent9, __write_mhpmevent9);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:19:1
    |
19  | reg!(0x329, mhpmevent9, __read_mhpmevent9, __write_mhpmevent9);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:19:1
    |
19  | reg!(0x329, mhpmevent9, __read_mhpmevent9, __write_mhpmevent9);
    | -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:20:1
   |
20 | reg!(0x32A, mhpmevent10, __read_mhpmevent10, __write_mhpmevent10);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:20:1
   |
20 | reg!(0x32A, mhpmevent10, __read_mhpmevent10, __write_mhpmevent10);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:20:1
   |
20 | reg!(0x32A, mhpmevent10, __read_mhpmevent10, __write_mhpmevent10);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:20:1
    |
20  | reg!(0x32A, mhpmevent10, __read_mhpmevent10, __write_mhpmevent10);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:20:1
    |
20  | reg!(0x32A, mhpmevent10, __read_mhpmevent10, __write_mhpmevent10);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:20:1
    |
20  | reg!(0x32A, mhpmevent10, __read_mhpmevent10, __write_mhpmevent10);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:21:1
   |
21 | reg!(0x32B, mhpmevent11, __read_mhpmevent11, __write_mhpmevent11);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:21:1
   |
21 | reg!(0x32B, mhpmevent11, __read_mhpmevent11, __write_mhpmevent11);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:21:1
   |
21 | reg!(0x32B, mhpmevent11, __read_mhpmevent11, __write_mhpmevent11);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:21:1
    |
21  | reg!(0x32B, mhpmevent11, __read_mhpmevent11, __write_mhpmevent11);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:21:1
    |
21  | reg!(0x32B, mhpmevent11, __read_mhpmevent11, __write_mhpmevent11);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:21:1
    |
21  | reg!(0x32B, mhpmevent11, __read_mhpmevent11, __write_mhpmevent11);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:22:1
   |
22 | reg!(0x32C, mhpmevent12, __read_mhpmevent12, __write_mhpmevent12);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:22:1
   |
22 | reg!(0x32C, mhpmevent12, __read_mhpmevent12, __write_mhpmevent12);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:22:1
   |
22 | reg!(0x32C, mhpmevent12, __read_mhpmevent12, __write_mhpmevent12);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:22:1
    |
22  | reg!(0x32C, mhpmevent12, __read_mhpmevent12, __write_mhpmevent12);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:22:1
    |
22  | reg!(0x32C, mhpmevent12, __read_mhpmevent12, __write_mhpmevent12);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:22:1
    |
22  | reg!(0x32C, mhpmevent12, __read_mhpmevent12, __write_mhpmevent12);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:23:1
   |
23 | reg!(0x32D, mhpmevent13, __read_mhpmevent13, __write_mhpmevent13);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:23:1
   |
23 | reg!(0x32D, mhpmevent13, __read_mhpmevent13, __write_mhpmevent13);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:23:1
   |
23 | reg!(0x32D, mhpmevent13, __read_mhpmevent13, __write_mhpmevent13);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:23:1
    |
23  | reg!(0x32D, mhpmevent13, __read_mhpmevent13, __write_mhpmevent13);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:23:1
    |
23  | reg!(0x32D, mhpmevent13, __read_mhpmevent13, __write_mhpmevent13);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:23:1
    |
23  | reg!(0x32D, mhpmevent13, __read_mhpmevent13, __write_mhpmevent13);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:24:1
   |
24 | reg!(0x32E, mhpmevent14, __read_mhpmevent14, __write_mhpmevent14);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:24:1
   |
24 | reg!(0x32E, mhpmevent14, __read_mhpmevent14, __write_mhpmevent14);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:24:1
   |
24 | reg!(0x32E, mhpmevent14, __read_mhpmevent14, __write_mhpmevent14);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:24:1
    |
24  | reg!(0x32E, mhpmevent14, __read_mhpmevent14, __write_mhpmevent14);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:24:1
    |
24  | reg!(0x32E, mhpmevent14, __read_mhpmevent14, __write_mhpmevent14);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:24:1
    |
24  | reg!(0x32E, mhpmevent14, __read_mhpmevent14, __write_mhpmevent14);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:25:1
   |
25 | reg!(0x32F, mhpmevent15, __read_mhpmevent15, __write_mhpmevent15);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:25:1
   |
25 | reg!(0x32F, mhpmevent15, __read_mhpmevent15, __write_mhpmevent15);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:25:1
   |
25 | reg!(0x32F, mhpmevent15, __read_mhpmevent15, __write_mhpmevent15);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:25:1
    |
25  | reg!(0x32F, mhpmevent15, __read_mhpmevent15, __write_mhpmevent15);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:25:1
    |
25  | reg!(0x32F, mhpmevent15, __read_mhpmevent15, __write_mhpmevent15);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:25:1
    |
25  | reg!(0x32F, mhpmevent15, __read_mhpmevent15, __write_mhpmevent15);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:26:1
   |
26 | reg!(0x330, mhpmevent16, __read_mhpmevent16, __write_mhpmevent16);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:26:1
   |
26 | reg!(0x330, mhpmevent16, __read_mhpmevent16, __write_mhpmevent16);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:26:1
   |
26 | reg!(0x330, mhpmevent16, __read_mhpmevent16, __write_mhpmevent16);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:26:1
    |
26  | reg!(0x330, mhpmevent16, __read_mhpmevent16, __write_mhpmevent16);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:26:1
    |
26  | reg!(0x330, mhpmevent16, __read_mhpmevent16, __write_mhpmevent16);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:26:1
    |
26  | reg!(0x330, mhpmevent16, __read_mhpmevent16, __write_mhpmevent16);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:27:1
   |
27 | reg!(0x331, mhpmevent17, __read_mhpmevent17, __write_mhpmevent17);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:27:1
   |
27 | reg!(0x331, mhpmevent17, __read_mhpmevent17, __write_mhpmevent17);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:27:1
   |
27 | reg!(0x331, mhpmevent17, __read_mhpmevent17, __write_mhpmevent17);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:27:1
    |
27  | reg!(0x331, mhpmevent17, __read_mhpmevent17, __write_mhpmevent17);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:27:1
    |
27  | reg!(0x331, mhpmevent17, __read_mhpmevent17, __write_mhpmevent17);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:27:1
    |
27  | reg!(0x331, mhpmevent17, __read_mhpmevent17, __write_mhpmevent17);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:28:1
   |
28 | reg!(0x332, mhpmevent18, __read_mhpmevent18, __write_mhpmevent18);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:28:1
   |
28 | reg!(0x332, mhpmevent18, __read_mhpmevent18, __write_mhpmevent18);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:28:1
   |
28 | reg!(0x332, mhpmevent18, __read_mhpmevent18, __write_mhpmevent18);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:28:1
    |
28  | reg!(0x332, mhpmevent18, __read_mhpmevent18, __write_mhpmevent18);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:28:1
    |
28  | reg!(0x332, mhpmevent18, __read_mhpmevent18, __write_mhpmevent18);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:28:1
    |
28  | reg!(0x332, mhpmevent18, __read_mhpmevent18, __write_mhpmevent18);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:29:1
   |
29 | reg!(0x333, mhpmevent19, __read_mhpmevent19, __write_mhpmevent19);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:29:1
   |
29 | reg!(0x333, mhpmevent19, __read_mhpmevent19, __write_mhpmevent19);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:29:1
   |
29 | reg!(0x333, mhpmevent19, __read_mhpmevent19, __write_mhpmevent19);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:29:1
    |
29  | reg!(0x333, mhpmevent19, __read_mhpmevent19, __write_mhpmevent19);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:29:1
    |
29  | reg!(0x333, mhpmevent19, __read_mhpmevent19, __write_mhpmevent19);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:29:1
    |
29  | reg!(0x333, mhpmevent19, __read_mhpmevent19, __write_mhpmevent19);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:30:1
   |
30 | reg!(0x334, mhpmevent20, __read_mhpmevent20, __write_mhpmevent20);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:30:1
   |
30 | reg!(0x334, mhpmevent20, __read_mhpmevent20, __write_mhpmevent20);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:30:1
   |
30 | reg!(0x334, mhpmevent20, __read_mhpmevent20, __write_mhpmevent20);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:30:1
    |
30  | reg!(0x334, mhpmevent20, __read_mhpmevent20, __write_mhpmevent20);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:30:1
    |
30  | reg!(0x334, mhpmevent20, __read_mhpmevent20, __write_mhpmevent20);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:30:1
    |
30  | reg!(0x334, mhpmevent20, __read_mhpmevent20, __write_mhpmevent20);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:31:1
   |
31 | reg!(0x335, mhpmevent21, __read_mhpmevent21, __write_mhpmevent21);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:31:1
   |
31 | reg!(0x335, mhpmevent21, __read_mhpmevent21, __write_mhpmevent21);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:31:1
   |
31 | reg!(0x335, mhpmevent21, __read_mhpmevent21, __write_mhpmevent21);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:31:1
    |
31  | reg!(0x335, mhpmevent21, __read_mhpmevent21, __write_mhpmevent21);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:31:1
    |
31  | reg!(0x335, mhpmevent21, __read_mhpmevent21, __write_mhpmevent21);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:31:1
    |
31  | reg!(0x335, mhpmevent21, __read_mhpmevent21, __write_mhpmevent21);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:32:1
   |
32 | reg!(0x336, mhpmevent22, __read_mhpmevent22, __write_mhpmevent22);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:32:1
   |
32 | reg!(0x336, mhpmevent22, __read_mhpmevent22, __write_mhpmevent22);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:32:1
   |
32 | reg!(0x336, mhpmevent22, __read_mhpmevent22, __write_mhpmevent22);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:32:1
    |
32  | reg!(0x336, mhpmevent22, __read_mhpmevent22, __write_mhpmevent22);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:32:1
    |
32  | reg!(0x336, mhpmevent22, __read_mhpmevent22, __write_mhpmevent22);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:32:1
    |
32  | reg!(0x336, mhpmevent22, __read_mhpmevent22, __write_mhpmevent22);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:33:1
   |
33 | reg!(0x337, mhpmevent23, __read_mhpmevent23, __write_mhpmevent23);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:33:1
   |
33 | reg!(0x337, mhpmevent23, __read_mhpmevent23, __write_mhpmevent23);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:33:1
   |
33 | reg!(0x337, mhpmevent23, __read_mhpmevent23, __write_mhpmevent23);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:33:1
    |
33  | reg!(0x337, mhpmevent23, __read_mhpmevent23, __write_mhpmevent23);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:33:1
    |
33  | reg!(0x337, mhpmevent23, __read_mhpmevent23, __write_mhpmevent23);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:33:1
    |
33  | reg!(0x337, mhpmevent23, __read_mhpmevent23, __write_mhpmevent23);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:34:1
   |
34 | reg!(0x338, mhpmevent24, __read_mhpmevent24, __write_mhpmevent24);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:34:1
   |
34 | reg!(0x338, mhpmevent24, __read_mhpmevent24, __write_mhpmevent24);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:34:1
   |
34 | reg!(0x338, mhpmevent24, __read_mhpmevent24, __write_mhpmevent24);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:34:1
    |
34  | reg!(0x338, mhpmevent24, __read_mhpmevent24, __write_mhpmevent24);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:34:1
    |
34  | reg!(0x338, mhpmevent24, __read_mhpmevent24, __write_mhpmevent24);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:34:1
    |
34  | reg!(0x338, mhpmevent24, __read_mhpmevent24, __write_mhpmevent24);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:35:1
   |
35 | reg!(0x339, mhpmevent25, __read_mhpmevent25, __write_mhpmevent25);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:35:1
   |
35 | reg!(0x339, mhpmevent25, __read_mhpmevent25, __write_mhpmevent25);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:35:1
   |
35 | reg!(0x339, mhpmevent25, __read_mhpmevent25, __write_mhpmevent25);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:35:1
    |
35  | reg!(0x339, mhpmevent25, __read_mhpmevent25, __write_mhpmevent25);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:35:1
    |
35  | reg!(0x339, mhpmevent25, __read_mhpmevent25, __write_mhpmevent25);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:35:1
    |
35  | reg!(0x339, mhpmevent25, __read_mhpmevent25, __write_mhpmevent25);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:36:1
   |
36 | reg!(0x33A, mhpmevent26, __read_mhpmevent26, __write_mhpmevent26);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:36:1
   |
36 | reg!(0x33A, mhpmevent26, __read_mhpmevent26, __write_mhpmevent26);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:36:1
   |
36 | reg!(0x33A, mhpmevent26, __read_mhpmevent26, __write_mhpmevent26);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:36:1
    |
36  | reg!(0x33A, mhpmevent26, __read_mhpmevent26, __write_mhpmevent26);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:36:1
    |
36  | reg!(0x33A, mhpmevent26, __read_mhpmevent26, __write_mhpmevent26);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:36:1
    |
36  | reg!(0x33A, mhpmevent26, __read_mhpmevent26, __write_mhpmevent26);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:37:1
   |
37 | reg!(0x33B, mhpmevent27, __read_mhpmevent27, __write_mhpmevent27);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:37:1
   |
37 | reg!(0x33B, mhpmevent27, __read_mhpmevent27, __write_mhpmevent27);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:37:1
   |
37 | reg!(0x33B, mhpmevent27, __read_mhpmevent27, __write_mhpmevent27);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:37:1
    |
37  | reg!(0x33B, mhpmevent27, __read_mhpmevent27, __write_mhpmevent27);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:37:1
    |
37  | reg!(0x33B, mhpmevent27, __read_mhpmevent27, __write_mhpmevent27);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:37:1
    |
37  | reg!(0x33B, mhpmevent27, __read_mhpmevent27, __write_mhpmevent27);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:38:1
   |
38 | reg!(0x33C, mhpmevent28, __read_mhpmevent28, __write_mhpmevent28);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:38:1
   |
38 | reg!(0x33C, mhpmevent28, __read_mhpmevent28, __write_mhpmevent28);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:38:1
   |
38 | reg!(0x33C, mhpmevent28, __read_mhpmevent28, __write_mhpmevent28);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:38:1
    |
38  | reg!(0x33C, mhpmevent28, __read_mhpmevent28, __write_mhpmevent28);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:38:1
    |
38  | reg!(0x33C, mhpmevent28, __read_mhpmevent28, __write_mhpmevent28);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:38:1
    |
38  | reg!(0x33C, mhpmevent28, __read_mhpmevent28, __write_mhpmevent28);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:39:1
   |
39 | reg!(0x33D, mhpmevent29, __read_mhpmevent29, __write_mhpmevent29);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:39:1
   |
39 | reg!(0x33D, mhpmevent29, __read_mhpmevent29, __write_mhpmevent29);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:39:1
   |
39 | reg!(0x33D, mhpmevent29, __read_mhpmevent29, __write_mhpmevent29);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:39:1
    |
39  | reg!(0x33D, mhpmevent29, __read_mhpmevent29, __write_mhpmevent29);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:39:1
    |
39  | reg!(0x33D, mhpmevent29, __read_mhpmevent29, __write_mhpmevent29);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:39:1
    |
39  | reg!(0x33D, mhpmevent29, __read_mhpmevent29, __write_mhpmevent29);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:40:1
   |
40 | reg!(0x33E, mhpmevent30, __read_mhpmevent30, __write_mhpmevent30);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:40:1
   |
40 | reg!(0x33E, mhpmevent30, __read_mhpmevent30, __write_mhpmevent30);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:40:1
   |
40 | reg!(0x33E, mhpmevent30, __read_mhpmevent30, __write_mhpmevent30);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:40:1
    |
40  | reg!(0x33E, mhpmevent30, __read_mhpmevent30, __write_mhpmevent30);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:40:1
    |
40  | reg!(0x33E, mhpmevent30, __read_mhpmevent30, __write_mhpmevent30);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:40:1
    |
40  | reg!(0x33E, mhpmevent30, __read_mhpmevent30, __write_mhpmevent30);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:41:1
   |
41 | reg!(0x33F, mhpmevent31, __read_mhpmevent31, __write_mhpmevent31);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:41:1
   |
41 | reg!(0x33F, mhpmevent31, __read_mhpmevent31, __write_mhpmevent31);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/mhpmeventx.rs:41:1
   |
41 | reg!(0x33F, mhpmevent31, __read_mhpmevent31, __write_mhpmevent31);
   | ----------------------------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:41:1
    |
41  | reg!(0x33F, mhpmevent31, __read_mhpmevent31, __write_mhpmevent31);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:41:1
    |
41  | reg!(0x33F, mhpmevent31, __read_mhpmevent31, __write_mhpmevent31);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/mhpmeventx.rs:41:1
    |
41  | reg!(0x33F, mhpmevent31, __read_mhpmevent31, __write_mhpmevent31);
    | ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `reg` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:311:1
    |
311 | read_csr_as!(Hcounteren, 3602, __read_hcounteren);
    | ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:311:1
    |
311 | read_csr_as!(Hcounteren, 3602, __read_hcounteren);
    | ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:311:1
    |
311 | read_csr_as!(Hcounteren, 3602, __read_hcounteren);
    | ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:312:1
    |
312 | write_csr!(3602, __write_hcounteren);
    | ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:312:1
    |
312 | write_csr!(3602, __write_hcounteren);
    | ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:312:1
    |
312 | write_csr!(3602, __write_hcounteren);
    | ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:313:1
    |
313 | set!(3602, __set_hcounteren);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:313:1
    |
313 | set!(3602, __set_hcounteren);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:313:1
    |
313 | set!(3602, __set_hcounteren);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:314:1
    |
314 | clear!(3602, __clear_hcounteren);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:314:1
    |
314 | clear!(3602, __clear_hcounteren);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hcounteren.rs:314:1
    |
314 | clear!(3602, __clear_hcounteren);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:131:1
    |
131 | read_csr_as!(Hedeleg, 1538, __read_hedeleg);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:131:1
    |
131 | read_csr_as!(Hedeleg, 1538, __read_hedeleg);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:131:1
    |
131 | read_csr_as!(Hedeleg, 1538, __read_hedeleg);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:132:1
    |
132 | write_csr!(1538, __write_hedeleg);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:132:1
    |
132 | write_csr!(1538, __write_hedeleg);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:132:1
    |
132 | write_csr!(1538, __write_hedeleg);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:133:1
    |
133 | set!(1538, __set_hedeleg);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:133:1
    |
133 | set!(1538, __set_hedeleg);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:133:1
    |
133 | set!(1538, __set_hedeleg);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:134:1
    |
134 | clear!(1538, __clear_hedeleg);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:134:1
    |
134 | clear!(1538, __clear_hedeleg);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hedeleg.rs:134:1
    |
134 | clear!(1538, __clear_hedeleg);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgatp.rs:50:1
   |
50 | read_csr_as!(Hgatp, 1664, __read_hgatp);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgatp.rs:50:1
   |
50 | read_csr_as!(Hgatp, 1664, __read_hgatp);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgatp.rs:50:1
   |
50 | read_csr_as!(Hgatp, 1664, __read_hgatp);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:51:1
    |
51  | write_csr!(1664, __write_hgatp);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:51:1
    |
51  | write_csr!(1664, __write_hgatp);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:51:1
    |
51  | write_csr!(1664, __write_hgatp);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:52:1
    |
52  | set!(1664, __set_hgatp);
    | ----------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:52:1
    |
52  | set!(1664, __set_hgatp);
    | ----------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:52:1
    |
52  | set!(1664, __set_hgatp);
    | ----------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:53:1
    |
53  | clear!(1664, __clear_hgatp);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:53:1
    |
53  | clear!(1664, __clear_hgatp);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgatp.rs:53:1
    |
53  | clear!(1664, __clear_hgatp);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/hgeie.rs:2:1
  |
2 | read_csr_as_usize!(1543, __read_hgeie);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgeie.rs:2:1
   |
2  | read_csr_as_usize!(1543, __read_hgeie);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgeie.rs:2:1
   |
2  | read_csr_as_usize!(1543, __read_hgeie);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgeie.rs:3:1
    |
3   | write_csr_as_usize!(1543, __write_hgeie);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgeie.rs:3:1
    |
3   | write_csr_as_usize!(1543, __write_hgeie);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgeie.rs:3:1
    |
3   | write_csr_as_usize!(1543, __write_hgeie);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/hgeip.rs:2:1
  |
2 | read_csr_as_usize!(3602, __read_hgeip);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgeip.rs:2:1
   |
2  | read_csr_as_usize!(3602, __read_hgeip);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hgeip.rs:2:1
   |
2  | read_csr_as_usize!(3602, __read_hgeip);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgeip.rs:3:1
    |
3   | write_csr_as_usize!(3602, __write_hgeip);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgeip.rs:3:1
    |
3   | write_csr_as_usize!(3602, __write_hgeip);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hgeip.rs:3:1
    |
3   | write_csr_as_usize!(3602, __write_hgeip);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hideleg.rs:50:1
   |
50 | read_csr_as!(Hideleg, 1539, __read_hideleg);
   | ------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hideleg.rs:50:1
   |
50 | read_csr_as!(Hideleg, 1539, __read_hideleg);
   | ------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hideleg.rs:50:1
   |
50 | read_csr_as!(Hideleg, 1539, __read_hideleg);
   | ------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:51:1
    |
51  | write_csr!(1539, __write_hideleg);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:51:1
    |
51  | write_csr!(1539, __write_hideleg);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:51:1
    |
51  | write_csr!(1539, __write_hideleg);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:52:1
    |
52  | set!(1539, __set_hideleg);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:52:1
    |
52  | set!(1539, __set_hideleg);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:52:1
    |
52  | set!(1539, __set_hideleg);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:53:1
    |
53  | clear!(1539, __clear_hideleg);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:53:1
    |
53  | clear!(1539, __clear_hideleg);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hideleg.rs:53:1
    |
53  | clear!(1539, __clear_hideleg);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hie.rs:59:1
   |
59 | read_csr_as!(Hie, 1540, __read_hie);
   | ----------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hie.rs:59:1
   |
59 | read_csr_as!(Hie, 1540, __read_hie);
   | ----------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hie.rs:59:1
   |
59 | read_csr_as!(Hie, 1540, __read_hie);
   | ----------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:60:1
    |
60  | write_csr!(1540, __write_hie);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:60:1
    |
60  | write_csr!(1540, __write_hie);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:60:1
    |
60  | write_csr!(1540, __write_hie);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:61:1
    |
61  | set!(1540, __set_hie);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:61:1
    |
61  | set!(1540, __set_hie);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:61:1
    |
61  | set!(1540, __set_hie);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:62:1
    |
62  | clear!(1540, __clear_hie);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:62:1
    |
62  | clear!(1540, __clear_hie);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hie.rs:62:1
    |
62  | clear!(1540, __clear_hie);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hip.rs:59:1
   |
59 | read_csr_as!(Hip, 1604, __read_hip);
   | ----------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hip.rs:59:1
   |
59 | read_csr_as!(Hip, 1604, __read_hip);
   | ----------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hip.rs:59:1
   |
59 | read_csr_as!(Hip, 1604, __read_hip);
   | ----------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:60:1
    |
60  | write_csr!(1604, __write_hip);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:60:1
    |
60  | write_csr!(1604, __write_hip);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:60:1
    |
60  | write_csr!(1604, __write_hip);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:61:1
    |
61  | set!(1604, __set_hip);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:61:1
    |
61  | set!(1604, __set_hip);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:61:1
    |
61  | set!(1604, __set_hip);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:62:1
    |
62  | clear!(1604, __clear_hip);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:62:1
    |
62  | clear!(1604, __clear_hip);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hip.rs:62:1
    |
62  | clear!(1604, __clear_hip);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:113:1
    |
113 | read_csr_as!(Hstatus, 1536, __read_hstatus);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:113:1
    |
113 | read_csr_as!(Hstatus, 1536, __read_hstatus);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:113:1
    |
113 | read_csr_as!(Hstatus, 1536, __read_hstatus);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:114:1
    |
114 | write_csr!(1536, __write_hstatus);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:114:1
    |
114 | write_csr!(1536, __write_hstatus);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:114:1
    |
114 | write_csr!(1536, __write_hstatus);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:115:1
    |
115 | set!(1536, __set_hstatus);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:115:1
    |
115 | set!(1536, __set_hstatus);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:115:1
    |
115 | set!(1536, __set_hstatus);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:116:1
    |
116 | clear!(1536, __clear_hstatus);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:116:1
    |
116 | clear!(1536, __clear_hstatus);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hstatus.rs:116:1
    |
116 | clear!(1536, __clear_hstatus);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:258:23
    |
258 |                 #[cfg(riscv32)]
    |                       ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hypervisorx64/htimedelta.rs:2:1
    |
2   | read_composite_csr!(super::htimedeltah::read(), read());
    | ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv32`
   --> riscv/src/register/macros.rs:267:27
    |
267 |                 #[cfg(not(riscv32))]
    |                           ^^^^^^^ help: found config with similar value: `target_arch = "riscv32"`
    |
   ::: riscv/src/register/hypervisorx64/htimedelta.rs:2:1
    |
2   | read_composite_csr!(super::htimedeltah::read(), read());
    | ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv32)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv32)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_composite_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/htimedelta.rs:3:1
  |
3 | read_csr_as_usize!(1541, __read_htimedelta);
  | ------------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htimedelta.rs:3:1
   |
3  | read_csr_as_usize!(1541, __read_htimedelta);
   | ------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htimedelta.rs:3:1
   |
3  | read_csr_as_usize!(1541, __read_htimedelta);
   | ------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htimedelta.rs:4:1
    |
4   | write_csr_as_usize!(1541, __write_htimedelta);
    | --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htimedelta.rs:4:1
    |
4   | write_csr_as_usize!(1541, __write_htimedelta);
    | --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htimedelta.rs:4:1
    |
4   | write_csr_as_usize!(1541, __write_htimedelta);
    | --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/htimedeltah.rs:2:1
  |
2 | read_csr_as_usize!(1557, __read_htimedeltah);
  | -------------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htimedeltah.rs:2:1
   |
2  | read_csr_as_usize!(1557, __read_htimedeltah);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htimedeltah.rs:2:1
   |
2  | read_csr_as_usize!(1557, __read_htimedeltah);
   | -------------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htimedeltah.rs:3:1
    |
3   | write_csr_as_usize!(1557, __write_htimedeltah);
    | ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htimedeltah.rs:3:1
    |
3   | write_csr_as_usize!(1557, __write_htimedeltah);
    | ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htimedeltah.rs:3:1
    |
3   | write_csr_as_usize!(1557, __write_htimedeltah);
    | ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/htinst.rs:2:1
  |
2 | read_csr_as_usize!(1610, __read_htinst);
  | --------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htinst.rs:2:1
   |
2  | read_csr_as_usize!(1610, __read_htinst);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htinst.rs:2:1
   |
2  | read_csr_as_usize!(1610, __read_htinst);
   | --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htinst.rs:3:1
    |
3   | write_csr_as_usize!(1610, __write_htinst);
    | ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htinst.rs:3:1
    |
3   | write_csr_as_usize!(1610, __write_htinst);
    | ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htinst.rs:3:1
    |
3   | write_csr_as_usize!(1610, __write_htinst);
    | ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/htval.rs:2:1
  |
2 | read_csr_as_usize!(1603, __read_htval);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htval.rs:2:1
   |
2  | read_csr_as_usize!(1603, __read_htval);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/htval.rs:2:1
   |
2  | read_csr_as_usize!(1603, __read_htval);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htval.rs:3:1
    |
3   | write_csr_as_usize!(1603, __write_htval);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htval.rs:3:1
    |
3   | write_csr_as_usize!(1603, __write_htval);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/htval.rs:3:1
    |
3   | write_csr_as_usize!(1603, __write_htval);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hvip.rs:50:1
   |
50 | read_csr_as!(Hvip, 1605, __read_hvip);
   | ------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hvip.rs:50:1
   |
50 | read_csr_as!(Hvip, 1605, __read_hvip);
   | ------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/hvip.rs:50:1
   |
50 | read_csr_as!(Hvip, 1605, __read_hvip);
   | ------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:51:1
    |
51  | write_csr!(1605, __write_hvip);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:51:1
    |
51  | write_csr!(1605, __write_hvip);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:51:1
    |
51  | write_csr!(1605, __write_hvip);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:52:1
    |
52  | set!(1605, __set_hvip);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:52:1
    |
52  | set!(1605, __set_hvip);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:52:1
    |
52  | set!(1605, __set_hvip);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:53:1
    |
53  | clear!(1605, __clear_hvip);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:53:1
    |
53  | clear!(1605, __clear_hvip);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/hvip.rs:53:1
    |
53  | clear!(1605, __clear_hvip);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsatp.rs:50:1
   |
50 | read_csr_as!(Vsatp, 640, __read_vsatp);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsatp.rs:50:1
   |
50 | read_csr_as!(Vsatp, 640, __read_vsatp);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsatp.rs:50:1
   |
50 | read_csr_as!(Vsatp, 640, __read_vsatp);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:51:1
    |
51  | write_csr!(640, __write_vsatp);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:51:1
    |
51  | write_csr!(640, __write_vsatp);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:51:1
    |
51  | write_csr!(640, __write_vsatp);
    | ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:52:1
    |
52  | set!(640, __set_vsatp);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:52:1
    |
52  | set!(640, __set_vsatp);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:52:1
    |
52  | set!(640, __set_vsatp);
    | ---------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:53:1
    |
53  | clear!(640, __clear_vsatp);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:53:1
    |
53  | clear!(640, __clear_vsatp);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsatp.rs:53:1
    |
53  | clear!(640, __clear_vsatp);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vscause.rs:41:1
   |
41 | read_csr_as!(Vscause, 578, __read_vscause);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vscause.rs:41:1
   |
41 | read_csr_as!(Vscause, 578, __read_vscause);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vscause.rs:41:1
   |
41 | read_csr_as!(Vscause, 578, __read_vscause);
   | ------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:42:1
    |
42  | write_csr!(578, __write_vscause);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:42:1
    |
42  | write_csr!(578, __write_vscause);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:42:1
    |
42  | write_csr!(578, __write_vscause);
    | -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:43:1
    |
43  | set!(578, __set_vscause);
    | ------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:43:1
    |
43  | set!(578, __set_vscause);
    | ------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:43:1
    |
43  | set!(578, __set_vscause);
    | ------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:44:1
    |
44  | clear!(578, __clear_vscause);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:44:1
    |
44  | clear!(578, __clear_vscause);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vscause.rs:44:1
    |
44  | clear!(578, __clear_vscause);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/vsepc.rs:2:1
  |
2 | read_csr_as_usize!(577, __read_vsepc);
  | ------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsepc.rs:2:1
   |
2  | read_csr_as_usize!(577, __read_vsepc);
   | ------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsepc.rs:2:1
   |
2  | read_csr_as_usize!(577, __read_vsepc);
   | ------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsepc.rs:3:1
    |
3   | write_csr_as_usize!(577, __write_vsepc);
    | --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsepc.rs:3:1
    |
3   | write_csr_as_usize!(577, __write_vsepc);
    | --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsepc.rs:3:1
    |
3   | write_csr_as_usize!(577, __write_vsepc);
    | --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsie.rs:50:1
   |
50 | read_csr_as!(Vsie, 516, __read_vsie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsie.rs:50:1
   |
50 | read_csr_as!(Vsie, 516, __read_vsie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsie.rs:50:1
   |
50 | read_csr_as!(Vsie, 516, __read_vsie);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:51:1
    |
51  | write_csr!(516, __write_vsie);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:51:1
    |
51  | write_csr!(516, __write_vsie);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:51:1
    |
51  | write_csr!(516, __write_vsie);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:52:1
    |
52  | set!(516, __set_vsie);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:52:1
    |
52  | set!(516, __set_vsie);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:52:1
    |
52  | set!(516, __set_vsie);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:53:1
    |
53  | clear!(516, __clear_vsie);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:53:1
    |
53  | clear!(516, __clear_vsie);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsie.rs:53:1
    |
53  | clear!(516, __clear_vsie);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsip.rs:50:1
   |
50 | read_csr_as!(Vsip, 580, __read_vsip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsip.rs:50:1
   |
50 | read_csr_as!(Vsip, 580, __read_vsip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsip.rs:50:1
   |
50 | read_csr_as!(Vsip, 580, __read_vsip);
   | ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:51:1
    |
51  | write_csr!(580, __write_vsip);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:51:1
    |
51  | write_csr!(580, __write_vsip);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:51:1
    |
51  | write_csr!(580, __write_vsip);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:52:1
    |
52  | set!(580, __set_vsip);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:52:1
    |
52  | set!(580, __set_vsip);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:52:1
    |
52  | set!(580, __set_vsip);
    | --------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:53:1
    |
53  | clear!(580, __clear_vsip);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:53:1
    |
53  | clear!(580, __clear_vsip);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsip.rs:53:1
    |
53  | clear!(580, __clear_vsip);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/vsscratch.rs:2:1
  |
2 | read_csr_as_usize!(576, __read_vsscratch);
  | ----------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsscratch.rs:2:1
   |
2  | read_csr_as_usize!(576, __read_vsscratch);
   | ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vsscratch.rs:2:1
   |
2  | read_csr_as_usize!(576, __read_vsscratch);
   | ----------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsscratch.rs:3:1
    |
3   | write_csr_as_usize!(576, __write_vsscratch);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsscratch.rs:3:1
    |
3   | write_csr_as_usize!(576, __write_vsscratch);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsscratch.rs:3:1
    |
3   | write_csr_as_usize!(576, __write_vsscratch);
    | ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:7:27
    |
7   |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:113:1
    |
113 | read_csr_as!(Vsstatus, 512, __read_vsstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:14:27
    |
14  |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:113:1
    |
113 | read_csr_as!(Vsstatus, 512, __read_vsstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:23:27
    |
23  |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:113:1
    |
113 | read_csr_as!(Vsstatus, 512, __read_vsstatus);
    | -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:114:1
    |
114 | write_csr!(512, __write_vsstatus);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:114:1
    |
114 | write_csr!(512, __write_vsstatus);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:114:1
    |
114 | write_csr!(512, __write_vsstatus);
    | --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:115:1
    |
115 | set!(512, __set_vsstatus);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:115:1
    |
115 | set!(512, __set_vsstatus);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:115:1
    |
115 | set!(512, __set_vsstatus);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:116:1
    |
116 | clear!(512, __clear_vsstatus);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:116:1
    |
116 | clear!(512, __clear_vsstatus);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vsstatus.rs:116:1
    |
116 | clear!(512, __clear_vsstatus);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
 --> riscv/src/register/macros.rs:7:27
  |
7 |                 #[cfg(all(riscv, feature = "inline-asm"))]
  |                           ^^^^^
  |
 ::: riscv/src/register/hypervisorx64/vstval.rs:2:1
  |
2 | read_csr_as_usize!(579, __read_vstval);
  | -------------------------------------- in this macro invocation
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vstval.rs:2:1
   |
2  | read_csr_as_usize!(579, __read_vstval);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vstval.rs:2:1
   |
2  | read_csr_as_usize!(579, __read_vstval);
   | -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstval.rs:3:1
    |
3   | write_csr_as_usize!(579, __write_vstval);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstval.rs:3:1
    |
3   | write_csr_as_usize!(579, __write_vstval);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstval.rs:3:1
    |
3   | write_csr_as_usize!(579, __write_vstval);
    | ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` which comes from the expansion of the macro `write_csr_as_usize` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:7:27
   |
7  |                 #[cfg(all(riscv, feature = "inline-asm"))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vstvec.rs:41:1
   |
41 | read_csr_as!(Vstvec, 517, __read_vstvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:14:27
   |
14 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vstvec.rs:41:1
   |
41 | read_csr_as!(Vstvec, 517, __read_vstvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
  --> riscv/src/register/macros.rs:23:27
   |
23 |                 #[cfg(not(riscv))]
   |                           ^^^^^
   |
  ::: riscv/src/register/hypervisorx64/vstvec.rs:41:1
   |
41 | read_csr_as!(Vstvec, 517, __read_vstvec);
   | ---------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `read_csr` which comes from the expansion of the macro `read_csr_as` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:104:27
    |
104 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:42:1
    |
42  | write_csr!(517, __write_vstvec);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:107:27
    |
107 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:42:1
    |
42  | write_csr!(517, __write_vstvec);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:116:27
    |
116 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:42:1
    |
42  | write_csr!(517, __write_vstvec);
    | ------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `write_csr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:180:27
    |
180 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:43:1
    |
43  | set!(517, __set_vstvec);
    | ----------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:183:27
    |
183 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:43:1
    |
43  | set!(517, __set_vstvec);
    | ----------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:192:27
    |
192 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:43:1
    |
43  | set!(517, __set_vstvec);
    | ----------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `set` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:206:27
    |
206 |                 #[cfg(all(riscv, feature = "inline-asm"))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:44:1
    |
44  | clear!(517, __clear_vstvec);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:209:27
    |
209 |                 #[cfg(all(riscv, not(feature = "inline-asm")))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:44:1
    |
44  | clear!(517, __clear_vstvec);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `riscv`
   --> riscv/src/register/macros.rs:218:27
    |
218 |                 #[cfg(not(riscv))]
    |                           ^^^^^
    |
   ::: riscv/src/register/hypervisorx64/vstvec.rs:44:1
    |
44  | clear!(517, __clear_vstvec);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(riscv)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(riscv)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `clear` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable
  --> riscv/src/lib.rs:18:45
   |
18 | #![cfg_attr(feature = "inline-asm", feature(asm_const))]
   |                                             ^^^^^^^^^
   |
   = note: `#[warn(stable_features)]` on by default

       Fresh xmas-elf v0.7.0
       Fresh kernel_guard v0.1.1 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os/src/kernel_guard)
warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable
  --> src/kernel_guard/src/lib.rs:56:12
   |
56 | #![feature(asm_const)]
   |            ^^^^^^^^^
   |
   = note: `#[warn(stable_features)]` on by default

       Dirty os v0.1.0 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os): the file `../user/src` is missing
   Compiling os v0.1.0 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os)
       Fresh buddy_system_allocator v0.6.0
       Fresh virtio-drivers v0.7.1 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os/virtio-drivers)
       Fresh num_enum v0.7.3
warning: `lwext4_rust` (lib) generated 4 warnings (run `cargo fix --lib -p lwext4_rust` to apply 2 suggestions)
warning: `riscv` (lib) generated 1469 warnings
warning: `kernel_guard` (lib) generated 1 warning
     Running `/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/debug/build/os-548d633d0d21f791/build-script-build`
       Fresh async-trait v0.1.88
       Fresh linux-raw-sys v0.9.4
       Fresh lazy_init v0.1.0 (/home/ustc/桌面/clone/OSclone/2024a-rcore/os/src/lazy_init)
     Running `/home/ustc/.rustup/toolchains/nightly-2025-01-18-x86_64-unknown-linux-gnu/bin/rustc --crate-name os --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=e9a1ba31a275590e -C extra-filename=-28508dc97ce9f474 --out-dir '/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps' --target riscv64gc-unknown-none-elf -C 'incremental=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/incremental' -L 'dependency=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps' -L 'dependency=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/debug/deps' --extern 'async_trait=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/debug/deps/libasync_trait-5b1c798d24af6086.so' --extern 'bitflags=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libbitflags-63c645db1072d66a.rlib' --extern 'buddy_system_allocator=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libbuddy_system_allocator-1213cafc811febc4.rlib' --extern 'cfg_if=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libcfg_if-a34d2ea8b99aadb7.rlib' --extern 'hashbrown=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libhashbrown-5b02f260bc09bd25.rlib' --extern 'kernel_guard=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libkernel_guard-0767883d5bf4d317.rlib' --extern 'lazy_init=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/liblazy_init-4d16abbfffee83f0.rlib' --extern 'lazy_static=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/liblazy_static-b604223cd6dd8128.rlib' --extern 'linux_raw_sys=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/liblinux_raw_sys-92067516a3cac3bc.rlib' --extern 'log=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/liblog-e6d854f1ffc9313c.rlib' --extern 'lwext4_rust=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/liblwext4_rust-abc9814298ee295f.rlib' --extern 'num_enum=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libnum_enum-319262f92d38309c.rlib' --extern 'riscv=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libriscv-3c962c1778fd8793.rlib' --extern 'spin=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libspin-7fde606892f06975.rlib' --extern 'virtio_drivers=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libvirtio_drivers-d2047ce17bd35e58.rlib' --extern 'xmas_elf=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/target/riscv64gc-unknown-none-elf/debug/deps/libxmas_elf-3fed33f1a0b2e5a3.rlib' -Clink-arg=-Tsrc/linker.ld -Cforce-frame-pointers=yes -L 'native=/home/ustc/桌面/clone/OSclone/2024a-rcore/os/lwext4_rust/c/lwext4'`
warning: unused import: `panic`
 --> src/drivers/block/virtio_blk.rs:1:12
  |
1 | use core::{panic, ptr::NonNull};
  |            ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `fix_path`
  --> src/fs/ext4/ops.rs:12:32
   |
12 | use crate::fs::{as_inode_type, fix_path, OpenFlags, Statfs};
   |                                ^^^^^^^^

warning: unused import: `lwext4_rust::file::OsDirent`
  --> src/fs/ext4/ops.rs:25:5
   |
25 | use lwext4_rust::file::OsDirent;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `bindings::ext4_direntry`
 --> src/fs/vfs/vfs_ops.rs:3:19
  |
3 | use lwext4_rust::{bindings::ext4_direntry, InodeTypes};
  |                   ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `core::cell::UnsafeCell`
 --> src/fs/fd.rs:2:5
  |
2 | use core::cell::UnsafeCell;
  |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `vec::Vec` and `vec`
 --> src/fs/fd.rs:6:5
  |
6 |     vec,
  |     ^^^
7 |     vec::Vec,
  |     ^^^^^^^^

warning: unused imports: `SyscallRet` and `TemplateRet`
  --> src/fs/fd.rs:10:27
   |
10 | use crate::utils::error::{TemplateRet, SysErrNo, SyscallRet};
   |                           ^^^^^^^^^^^            ^^^^^^^^^^

warning: unused imports: `Stdin` and `Stdout`
  --> src/fs/fd.rs:12:40
   |
12 | use super::{  File,OsInode, OpenFlags, Stdin, Stdout};
   |                                        ^^^^^  ^^^^^^

warning: unused import: `Weak`
 --> src/fs/pipe.rs:3:17
  |
3 |     sync::{Arc, Weak},
  |                 ^^^^

warning: unused import: `task::yield_now`
  --> src/fs/pipe.rs:17:5
   |
17 |     task::yield_now, // 如果 read/write 仍然想在某些情况下让权
   |     ^^^^^^^^^^^^^^^

warning: unused import: `alloc::sync::Arc`
 --> src/fs/poll.rs:1:5
  |
1 | use alloc::sync::Arc;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `alloc::boxed::Box`
 --> src/fs/poll.rs:3:5
  |
3 | use alloc::boxed::Box;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `Waker`
 --> src/fs/poll.rs:6:33
  |
6 | use core::task::{Context, Poll, Waker};
  |                                 ^^^^^

warning: unused import: `core::mem`
 --> src/fs/poll.rs:7:5
  |
7 | use core::mem;
  |     ^^^^^^^^^

warning: unused imports: `ProcessControlBlock` and `current_process`
  --> src/fs/poll.rs:10:19
   |
10 | use crate::task::{current_process, ProcessControlBlock};
   |                   ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused import: `copy_from_user_array`
  --> src/fs/poll.rs:12:29
   |
12 | use crate::mm::page_table::{copy_from_user_array, copy_to_user_bytes_exact}; // 假设有 copy_to_user_bytes_exact
   |                             ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `TranslateError`
  --> src/fs/poll.rs:13:27
   |
13 | use crate::mm::{VirtAddr, TranslateError};
   |                           ^^^^^^^^^^^^^^

warning: unused imports: `ASyncRet`, `ASyscallRet`, `get_parent_path_and_filename`, and `normalize_absolute_path`
  --> src/fs/mod.rs:19:96
   |
19 | ...::{ASyncRet, ASyscallRet, GeneralRet, SysErrNo, SyscallRet, TemplateRet}, string::{get_parent_path_and_filename, normalize_absolute_path}...
   |       ^^^^^^^^  ^^^^^^^^^^^                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `PAGE_SIZE_BITS`
 --> src/mm/memory_set.rs:2:62
  |
2 | use crate::config::{ DL_INTERP_OFFSET, KERNEL_DIRECT_OFFSET, PAGE_SIZE_BITS};
  |                                                              ^^^^^^^^^^^^^^

warning: unused import: `self`
 --> src/mm/memory_set.rs:8:25
  |
8 | use super::page_table::{self, PutDataError, PutDataRet};
  |                         ^^^^

warning: unused imports: `Exception` and `Trap`
  --> src/mm/memory_set.rs:17:31
   |
17 | use riscv::register::scause::{Exception,  Trap};
   |                               ^^^^^^^^^   ^^^^

warning: unused imports: `OsInode` and `SyscallRet`
  --> src/mm/area.rs:12:32
   |
12 |     fs::{File, FileDescriptor, OsInode},
   |                                ^^^^^^^
...
15 |     utils::error::{SyscallRet, TemplateRet},
   |                    ^^^^^^^^^^

warning: unused import: `alloc::vec::Vec`
 --> src/sync/waitqueue.rs:4:5
  |
4 | use alloc::vec::Vec;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `waker`
  --> src/sync/waitqueue.rs:10:19
   |
10 | use crate::task::{waker, Task, TaskStatus}; // 假设使用的是 spin crate 的 Mutex
   |                   ^^^^^

warning: unused imports: `AtomicU32` and `Ordering as AtomicOrdering`
 --> src/sync/futex.rs:6:26
  |
6 | use core::sync::atomic::{AtomicU32, Ordering as AtomicOrdering};
  |                          ^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `UserTimeSpec` and `current_time`
  --> src/sync/futex.rs:14:29
   |
14 | use crate::timer::{TimeVal, current_time, UserTimeSpec};
   |                             ^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `crate::fs::dev::open_device_file`
 --> src/syscall/fs.rs:3:5
  |
3 | use crate::fs::dev::open_device_file;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `alloc::boxed::Box`
  --> src/syscall/fs.rs:10:5
   |
10 | use alloc::boxed::Box;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `alloc::sync::Arc`
  --> src/syscall/fs.rs:12:5
   |
12 | use alloc::sync::Arc;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `super::process`
  --> src/syscall/fs.rs:27:5
   |
27 | use super::process;
   |     ^^^^^^^^^^^^^^

warning: unused imports: `PageTable` and `TranslateError`
   --> src/syscall/fs.rs:368:27
    |
368 | use crate::mm::{VirtAddr, TranslateError, PageTable}; 
    |                           ^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `FLAGS_CLOCKRT`, `FLAGS_SHARED`, `FUTEX_CMD_MASK`, `ProcessRef`, `current_token`, `get_time_us`, `self`, and `translated_byte_buffer`
  --> src/syscall/process.rs:12:78
   |
12 | ...et_ref, page_table::copy_to_user_bytes, put_data, translated_byte_buffer, translated_refmut, translated_str, MapArea, MapAreaType, MapPermission, MapType, MmapFile, ...
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^
13 | ...Key, FutexWaitInternalFuture, GLOBAL_FUTEX_SYSTEM}, syscall::flags::{ self, MmapProt, WaitFlags, FLAGS_CLOCKRT, FLAGS_SHARED, FUTEX_CLOCK_REALTIME, FUTEX_CMD_MASK, F...
   |                                                                          ^^^^                       ^^^^^^^^^^^^^  ^^^^^^^^^^^^                        ^^^^^^^^^^^^^^
14 | ...rrent_task, current_task_id, current_token, exit_current, exit_proc, future::{JoinFuture, WaitAnyFuture}, set_priority, yield_now, CloneFlags, ProcessRef, RobustList...
   |                                 ^^^^^^^^^^^^^                                                                                                     ^^^^^^^^^^
15 | ...e, get_time_us, get_usertime, TimeVal, UserTimeSpec}, utils::{
   |       ^^^^^^^^^^^

warning: unused imports: `put_data` and `translated_refmut`
  --> src/syscall/signal.rs:14:34
   |
14 | use crate::{mm::{get_target_ref, put_data, translated_refmut}, signal::{load_trap_for_signal, send_signal_to_task, SigAction, SigInfo, Si...
   |                                  ^^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: unused import: `fill_str`
 --> src/syscall/other.rs:4:92
  |
4 | use crate::{config::MAX_KERNEL_RW_BUFFER_SIZE, fs::{open_file, OpenFlags, NONE_MODE}, mm::{fill_str, get_target_ref, page_table::get_data...
  |                                                                                            ^^^^^^^^

warning: unused import: `cfg_if::cfg_if`
 --> src/syscall/arch/mod.rs:1:5
  |
1 | use cfg_if::cfg_if; 
  |     ^^^^^^^^^^^^^^

warning: unused import: `timer::TimeVal`
  --> src/syscall/mod.rs:26:63
   |
26 | use crate::{fs::{Kstat, PollFd}, signal::{SigAction, SigSet}, timer::TimeVal, utils::error::SyscallRet};
   |                                                               ^^^^^^^^^^^^^^

warning: unused import: `TrapContext`
  --> src/task/processor.rs:15:59
   |
15 | use crate::trap::{disable_irqs, enable_irqs, user_return, TrapContext, TrapStatus};
   |                                                           ^^^^^^^^^^^

warning: unused imports: `current_token` and `yield_now`
 --> src/task/task.rs:5:22
  |
5 |     current_process, current_token, pid_alloc, yield_now, CloneFlags, PidHandle, ProcessRef,
  |                      ^^^^^^^^^^^^^             ^^^^^^^^^

warning: unused import: `find_inode`
  --> src/task/task.rs:10:17
   |
10 | use crate::fs::{find_inode, open_file, FileClass, FileDescriptor, OpenFlags, Stdin, Stdout};
   |                 ^^^^^^^^^^

warning: unused imports: `flush_tlb` and `get_target_ref`
  --> src/task/task.rs:12:5
   |
12 |     flush_tlb, get_target_ref, put_data, translated_refmut, MapAreaType, MapPermission, MemorySet, VirtAddr, VirtPageNum
   |     ^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `Tms`
  --> src/task/task.rs:21:30
   |
21 | use crate::timer::{TimeData, Tms};
   |                              ^^^

warning: unused import: `crate::utils::bpoint`
  --> src/task/task.rs:23:5
   |
23 | use crate::utils::bpoint;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::schedule::remove_task`
  --> src/task/sleeplist.rs:16:5
   |
16 | use super::schedule::remove_task; // 假设 current_task_id() -> usize
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `get_target_ref`
  --> src/signal/mod.rs:35:17
   |
35 | use crate::mm::{get_target_ref, put_data, translated_refmut};
   |                 ^^^^^^^^^^^^^^

warning: unused imports: `SigSet`, `SignalStack`, `TaskStatus`, `current_task`, and `page_round_up`
 --> src/trap/context.rs:6:22
  |
6 | use crate::{signal::{SigSet, SignalStack}, task::{current_stack_top, current_task, TaskStatus}, utils::{ page_round_up}};
  |                      ^^^^^^  ^^^^^^^^^^^                             ^^^^^^^^^^^^  ^^^^^^^^^^            ^^^^^^^^^^^^^

warning: unused import: `crate::config::PAGE_SIZE`
  --> src/trap/mod.rs:19:5
   |
19 | use crate::config::PAGE_SIZE;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::fs::File`
  --> src/trap/mod.rs:20:5
   |
20 | use crate::fs::File;
   |     ^^^^^^^^^^^^^^^

warning: unused imports: `MemorySet`, `VirtAddr`, `flush_tlb`, and `translated_byte_buffer`
  --> src/trap/mod.rs:21:17
   |
21 | use crate::mm::{flush_tlb, translated_byte_buffer, MemorySet,  VirtAddr};
   |                 ^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^   ^^^^^^^^

warning: unused import: `crate::sync::Mutex`
  --> src/trap/mod.rs:22:5
   |
22 | use crate::sync::Mutex;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `current_process` and `task_count`
  --> src/trap/mod.rs:25:5
   |
25 |     current_process, current_task, current_task_may_uninit, exit_current, pick_next_task, run_task2, task_count, task_tick, yield_now, Cu...
   |     ^^^^^^^^^^^^^^^                                                                                  ^^^^^^^^^^

warning: unused import: `GeneralRet`
  --> src/trap/mod.rs:29:27
   |
29 | use crate::utils::error::{GeneralRet, SysErrNo};
   |                           ^^^^^^^^^^

warning: unused imports: `SEEK_CUR` and `SEEK_SET`
  --> src/trap/mod.rs:37:29
   |
37 | use lwext4_rust::bindings::{SEEK_CUR, SEEK_SET};
   |                             ^^^^^^^^  ^^^^^^^^

warning: unused import: `FrameTracker`
  --> src/utils/mod.rs:17:49
   |
17 | use crate::{config::{PAGE_SIZE, PATH_MAX}, mm::{FrameTracker, VirtAddr}};
   |                                                 ^^^^^^^^^^^^

warning: unused variable: `initshsize`
   --> src/fs/mod.rs:577:9
    |
577 |     let initshsize = initshfile.write(initshbuf).await?;
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_initshsize`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `child_task`
   --> src/syscall/process.rs:533:27
    |
533 |         if let Some((idx, child_task)) = pair {
    |                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_child_task`

warning: unused variable: `tz`
   --> src/syscall/process.rs:599:55
    |
599 | pub async  fn sys_gettimeofday(ts: *mut UserTimeSpec, tz: usize) -> SyscallRet {
    |                                                       ^^ help: if this is intentional, prefix it with an underscore: `_tz`

warning: unused variable: `token`
  --> src/syscall/signal.rs:95:9
   |
95 |     let token = current_task_arc.get_process().get_user_token().await;
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_token`

warning: unused variable: `envp_base`
   --> src/task/task.rs:643:13
    |
643 |         let envp_base = user_sp;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_envp_base`

warning: unused variable: `argv_base`
   --> src/task/task.rs:654:13
    |
654 |         let argv_base = user_sp;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_argv_base`

warning: unused variable: `mmap_flag`
   --> src/syscall/process.rs:751:9
    |
751 |     let mmap_flag= MmapFlags::empty();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mmap_flag`

warning: unused variable: `sig`
   --> src/syscall/signal.rs:156:9
    |
156 |     let sig = match Signal::from_usize(signum_usize) {
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_sig`

warning: variable does not need to be mutable
   --> src/syscall/fs.rs:720:13
    |
720 |         let mut user_buffer = UserBuffer::new(user_memory_slices); 
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `target_inode_arc`
    --> src/syscall/fs.rs:1444:9
     |
1444 |     let target_inode_arc = match find_inode(&abs_path,OpenFlags::O_PATH){ // 假设有异步 lookup_inode
     |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_inode_arc`

warning: unused variable: `task_arc`
   --> src/syscall/signal.rs:269:9
    |
269 |     let task_arc = current_task();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_arc`

warning: unreachable statement
   --> src/signal/mod.rs:242:17
    |
241 |                 unimplemented!();
    |                 ---------------- any code following this expression is unreachable
242 |                 continue;
    |                 ^^^^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `sp_base`
   --> src/signal/mod.rs:324:29
    |
324 |                         let sp_base: usize = (((sp - core::mem::size_of::<SigInfo>()) & !0xf)
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sp_base`

warning: `#[no_mangle]` attribute may not be used in combination with `#[export_name]`
   --> src/utils/mod.rs:147:1
    |
147 | #[no_mangle]            
    | ^^^^^^^^^^^^ `#[no_mangle]` is ignored
    |
note: `#[export_name]` takes precedence
   --> src/utils/mod.rs:149:1
    |
149 | #[export_name = "bpoint"] 
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(unused_attributes)]` on by default
help: remove the `#[no_mangle]` attribute
    |
147 - #[no_mangle]            
    |

warning: unused variable: `vaddr`
  --> src/drivers/block/virtio_blk.rs:48:47
   |
48 |     unsafe fn dma_dealloc(paddr: DMAPhysAddr, vaddr: NonNull<u8>, pages: usize) -> i32 {
   |                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_vaddr`

warning: unused variable: `buf`
  --> src/fs/stdio.rs:51:33
   |
51 |     async fn write<'buf>(&self, buf: UserBuffer<'buf>) -> Result<usize, SysErrNo>{
   |                                 ^^^ help: if this is intentional, prefix it with an underscore: `_buf`

warning: unused variable: `waker_to_register`
  --> src/fs/stdio.rs:55:40
   |
55 |     fn poll(&self, events: PollEvents, waker_to_register: &Waker) -> PollEvents {
   |                                        ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_waker_to_register`

warning: unused variable: `buf`
  --> src/fs/stdio.rs:90:13
   |
90 |         mut buf: UserBuffer<'a>  
   |             ^^^ help: if this is intentional, prefix it with an underscore: `_buf`

warning: variable does not need to be mutable
  --> src/fs/stdio.rs:90:9
   |
90 |         mut buf: UserBuffer<'a>  
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `p2`
   --> src/fs/ext4/ops.rs:163:14
    |
163 |         let (p2,name2) = get_parent_path_and_filename(path2);
    |              ^^ help: if this is intentional, prefix it with an underscore: `_p2`

warning: unused variable: `off`
   --> src/fs/vfs/vfs_ops.rs:122:27
    |
122 |     fn read_dentry(&self, off: usize, len: usize) -> Result<(Vec<u8>, isize), SysErrNo>{
    |                           ^^^ help: if this is intentional, prefix it with an underscore: `_off`

warning: unused variable: `len`
   --> src/fs/vfs/vfs_ops.rs:122:39
    |
122 |     fn read_dentry(&self, off: usize, len: usize) -> Result<(Vec<u8>, isize), SysErrNo>{
    |                                       ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `path1`
   --> src/fs/vfs/vfs_ops.rs:129:24
    |
129 |     fn exchange(&self, path1: &str, path2: &str) -> Result<(), SysErrNo> {
    |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_path1`

warning: unused variable: `path2`
   --> src/fs/vfs/vfs_ops.rs:129:37
    |
129 |     fn exchange(&self, path1: &str, path2: &str) -> Result<(), SysErrNo> {
    |                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_path2`

warning: unused variable: `path`
   --> src/fs/vfs/vfs_ops.rs:143:9
    |
143 |         path: &str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `flags`
   --> src/fs/vfs/vfs_ops.rs:144:9
    |
144 |         flags: OpenFlags,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_flags`

warning: unused variable: `loop_times`
   --> src/fs/vfs/vfs_ops.rs:145:9
    |
145 |         loop_times: usize,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_loop_times`

warning: unused variable: `path`
   --> src/fs/vfs/vfs_ops.rs:178:22
    |
178 |     fn unlink(&self, path: &str) -> SyscallRet {
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `data`
  --> src/fs/mount.rs:75:9
   |
75 |         data: Option<String>, // data 参数通常是可选的
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `buf`
  --> src/fs/mod.rs:85:13
   |
85 |         mut buf: UserBuffer<'a>
   |             ^^^ help: if this is intentional, prefix it with an underscore: `_buf`

warning: variable does not need to be mutable
  --> src/fs/mod.rs:85:9
   |
85 |         mut buf: UserBuffer<'a>
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `buf`
  --> src/fs/mod.rs:95:9
   |
95 |         buf: UserBuffer<'a>
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_buf`

warning: unused variable: `events`
   --> src/fs/mod.rs:134:20
    |
134 |     fn poll(&self, events: PollEvents, waker_to_register: &Waker) -> PollEvents{
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_events`

warning: unused variable: `waker_to_register`
   --> src/fs/mod.rs:134:40
    |
134 |     fn poll(&self, events: PollEvents, waker_to_register: &Waker) -> PollEvents{
    |                                        ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_waker_to_register`

warning: variable does not need to be mutable
   --> src/mm/memory_set.rs:286:13
    |
286 |         let mut tls=0;
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `kernel_dest_byte_slice`
   --> src/mm/page_table.rs:934:9
    |
934 |     let kernel_dest_byte_slice: &mut [MaybeUninit<u8>] = {
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_dest_byte_slice`

warning: unnecessary `unsafe` block
   --> src/sync/futex.rs:129:42
    |
129 |         let current_val_in_user = *match unsafe { get_target_ref(this.token, this.uaddr_va as *const u32) } {
    |                                          ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary `unsafe` block
   --> src/sync/futex.rs:159:34
    |
159 |             let waker_instance = unsafe { waker_from_task(task_ptr) };
    |                                  ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/syscall/fs.rs:683:58
    |
683 |         let user_memory_slices: Vec<&'static mut [u8]> = unsafe {
    |                                                          ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/syscall/fs.rs:930:58
    |
930 |         let user_memory_slices: Vec<&'static mut [u8]> = unsafe {
    |                                                          ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/syscall/process.rs:1183:60
     |
1183 |             let current_val_in_user_initial_check =* match unsafe {  get_target_ref(token, uaddr_user_ptr ) } {
     |                                                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/syscall/process.rs:1194:42
     |
1194 |                 let timeout_spec = match unsafe { get_target_ref(token, timespec_user_ptr) } {
     |                                          ^^^^^^ unnecessary `unsafe` block

warning: variable does not need to be mutable
  --> src/task/processor.rs:33:18
   |
33 | pub fn run_task2(mut curr: CurrentTask) {
   |                  ----^^^^
   |                  |
   |                  help: remove this `mut`

warning: unused variable: `cx`
   --> src/task/sleeplist.rs:167:35
    |
167 |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
    |                                   ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unnecessary `unsafe` block
   --> src/task/sleeplist.rs:200:35
    |
200 |         let waker_for_sleepnode = unsafe { waker_from_task(task_ptr_for_waker) };
    |                                   ^^^^^^ unnecessary `unsafe` block

warning: variable does not need to be mutable
   --> src/timer.rs:151:21
    |
151 |                 let mut usec = if self.usec >= other.usec {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: unused variable: `sig`
   --> src/signal/sigact.rs:159:25
    |
159 |             if let Some(sig) = Signal::from_usize(i) {
    |                         ^^^ help: if this is intentional, prefix it with an underscore: `_sig`

warning: variable does not need to be mutable
   --> src/signal/sigact.rs:155:13
    |
155 |         let mut actions = [SigAction::default(); NSIG];
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unnecessary `unsafe` block
  --> src/signal/mod.rs:90:9
   |
90 |         unsafe { crate::task::waker::wakeup_task(task_ptr) }; // 假设可以安全调用
   |         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/signal/mod.rs:120:13
    |
120 |             unsafe { crate::task::waker::wakeup_task(task_ptr) };
    |             ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/signal/mod.rs:270:21
    |
270 |                     unsafe { perform_default_action_for_process(pcb_arc, &task_arc.0, sig) };
    |                     ^^^^^^ unnecessary `unsafe` block

warning: unused variable: `a`
   --> src/utils/mod.rs:154:16
    |
154 | pub fn bpoint1(a:usize) {
    |                ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: constant `DEFAULT_FILE_MODE` is never used
  --> src/fs/inode.rs:16:11
   |
16 | pub const DEFAULT_FILE_MODE: u32 = 0o666;
   |           ^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: constant `DEFAULT_DIR_MODE` is never used
  --> src/fs/inode.rs:17:11
   |
17 | pub const DEFAULT_DIR_MODE: u32 = 0o777;
   |           ^^^^^^^^^^^^^^^^

warning: constant `BLOCK_SIZE` is never used
  --> src/fs/ext4/ops.rs:32:11
   |
32 | pub const BLOCK_SIZE: usize = 512;
   |           ^^^^^^^^^^

warning: constant `MS_RDONLY` is never used
  --> src/fs/mount.rs:13:7
   |
13 | const MS_RDONLY: u32 = 1;      // Mount read-only
   |       ^^^^^^^^^

warning: constant `MS_NOSUID` is never used
  --> src/fs/mount.rs:14:7
   |
14 | const MS_NOSUID: u32 = 2;      // Ignore SUID and SGID bits
   |       ^^^^^^^^^

warning: constant `MS_NODEV` is never used
  --> src/fs/mount.rs:15:7
   |
15 | const MS_NODEV: u32 = 4;       // Disallow access to device special files
   |       ^^^^^^^^

warning: constant `MS_NOEXEC` is never used
  --> src/fs/mount.rs:16:7
   |
16 | const MS_NOEXEC: u32 = 8;      // Disallow program execution
   |       ^^^^^^^^^

warning: constant `MS_SYNCHRONOUS` is never used
  --> src/fs/mount.rs:17:7
   |
17 | const MS_SYNCHRONOUS: u32 = 16; // Writes are synced at once
   |       ^^^^^^^^^^^^^^

warning: constant `MS_MANDLOCK` is never used
  --> src/fs/mount.rs:19:7
   |
19 | const MS_MANDLOCK: u32 = 64;   // Allow mandatory locks on an FS
   |       ^^^^^^^^^^^

warning: method `dealloc` is never used
   --> src/mm/area.rs:106:8
    |
39  | impl VmAreaTree {
    | --------------- method in this implementation
...
106 |     fn dealloc(&mut self, start_vpn: VirtPageNum) -> Option<MapArea> {
    |        ^^^^^^^

warning: methods `is_empty` and `notify_n` are never used
   --> src/sync/waitqueue.rs:51:12
    |
50  | impl GeneralWaitTaskList {
    | ------------------------ methods in this implementation
51  |     pub fn is_empty(&self)->bool{
    |            ^^^^^^^^
...
135 |     pub fn notify_n(&mut self, num_to_wake: usize) -> usize { // 返回唤醒的数量
    |            ^^^^^^^^

warning: function `sys_poll` is never used
    --> src/syscall/fs.rs:1014:14
     |
1014 | pub async fn sys_poll(user_fds_ptr: *mut PollFd, nfds: usize, timeout_ms: i32) -> SyscallRet {
     |              ^^^^^^^^

warning: function `sys_spawn` is never used
   --> src/syscall/process.rs:891:8
    |
891 | pub fn sys_spawn(_path: *const u8) -> SyscallRet {
    |        ^^^^^^^^^

warning: function `sys_set_priority` is never used
   --> src/syscall/process.rs:916:8
    |
916 | pub fn sys_set_priority(prio: isize) -> SyscallRet {
    |        ^^^^^^^^^^^^^^^^

warning: function `sys_pause` is never used
   --> src/syscall/signal.rs:267:15
    |
267 | pub async  fn sys_pause() -> SyscallRet {
    |               ^^^^^^^^^

warning: function `lcg` is never used
   --> src/syscall/other.rs:148:4
    |
148 | fn lcg(seed: &mut u64, buffer: &mut [u8]) {
    |    ^^^

warning: constant `SYSCALL_LINKAT` is never used
 --> src/syscall/arch/riscv64/mod.rs:5:11
  |
5 | pub const SYSCALL_LINKAT: usize = 37;
  |           ^^^^^^^^^^^^^^

warning: constant `SYSCALL_SET_PRIORITY` is never used
  --> src/syscall/arch/riscv64/mod.rs:27:11
   |
27 | pub const SYSCALL_SET_PRIORITY: usize = 140;
   |           ^^^^^^^^^^^^^^^^^^^^

warning: constant `SYSCALL_SPAWN` is never used
  --> src/syscall/arch/riscv64/mod.rs:47:11
   |
47 | pub const SYSCALL_SPAWN: usize = 400;
   |           ^^^^^^^^^^^^^

warning: constant `SYSCALL_CLOCK_GETRES` is never used
  --> src/syscall/arch/riscv64/mod.rs:89:11
   |
89 | pub const SYSCALL_CLOCK_GETRES:usize = 114; 
   |           ^^^^^^^^^^^^^^^^^^^^

warning: static `CWD` is never used
   --> src/task/mod.rs:226:9
    |
226 | static  CWD:&str = "/glibc";
    |         ^^^

warning: variants `Exited`, `Running`, and `NotExist` are never constructed
  --> src/task/flags.rs:53:5
   |
51 | pub enum WaitStatus {
   |          ---------- variants in this enum
52 |     /// 子任务正常退出
53 |     Exited,
   |     ^^^^^^
54 |     /// 子任务正在运行
55 |     Running,
   |     ^^^^^^^
56 |     /// 找不到对应的子任务
57 |     NotExist,
   |     ^^^^^^^^
   |
   = note: `WaitStatus` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: multiple methods are never used
   --> src/task/current.rs:32:8
    |
30  | impl CURRENT_TASK_PTR_WRAPPER {
    | ----------------------------- methods in this implementation
31  |     /// Returns the offset relative to the per-CPU data area base on the current CPU.
32  |     fn offset(&self) -> usize {
    |        ^^^^^^
...
51  |     pub unsafe fn current_ptr(&self) -> *const usize {
    |                   ^^^^^^^^^^^
...
64  |     pub unsafe fn current_ref_raw(&self) -> &usize {
    |                   ^^^^^^^^^^^^^^^
...
75  |     pub unsafe fn current_ref_mut_raw(&self) -> &mut usize {
    |                   ^^^^^^^^^^^^^^^^^^^
...
82  |     pub fn with_current<F, T>(&self, f: F) -> T
    |            ^^^^^^^^^^^^
...
127 |     pub fn read_current(&self) -> usize {
    |            ^^^^^^^^^^^^
...
133 |     pub fn write_current(&self, val: usize) {
    |            ^^^^^^^^^^^^^

warning: method `get_id` is never used
  --> src/task/schedule.rs:62:8
   |
41 | impl<T> CFSTask<T> {
   | ------------------ method in this implementation
...
62 |     fn get_id(&self) -> isize {
   |        ^^^^^^

warning: method `remove_task` is never used
   --> src/task/schedule.rs:151:8
    |
131 | impl<T> CFScheduler<T> {
    | ---------------------- method in this implementation
...
151 |     fn remove_task(&mut self, task: &SchedItem<T>) -> Option<SchedItem<T>> {
    |        ^^^^^^^^^^^

warning: function `remove_task` is never used
   --> src/task/schedule.rs:206:8
    |
206 | pub fn remove_task(task: &SchedItem<TaskControlBlock>) -> Option<SchedItem<TaskControlBlock>> {
    |        ^^^^^^^^^^^

warning: function `new_fd_with_stdio` is never used
    --> src/task/task.rs:1271:8
     |
1271 | pub fn new_fd_with_stdio() -> Vec<Option<FileDescriptor>> {
     |        ^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> src/timer.rs:48:8
   |
41 | impl TimeVal {
   | ------------ associated function in this implementation
...
48 |     fn new(sec: usize, usec: usize) -> Self {
   |        ^^^

warning: unused `Result` that must be used
   --> src/drivers/block/disk.rs:156:9
    |
156 |         dev.flush();
    |         ^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
156 |         let _ = dev.flush();
    |         +++++++

warning: creating a shared reference to mutable static is discouraged
  --> src/fs/dev.rs:72:50
   |
72 |         info!("register device {},{}", abs_path, DEV_NO);
   |                                                  ^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[warn(static_mut_refs)]` on by default

warning: creating a shared reference to mutable static is discouraged
  --> src/mm/heap_allocator.rs:18:52
   |
18 |    unsafe { println!("heap start:{:#x},end: {:#x}",HEAP_SPACE.as_ptr() as usize,HEAP_SPACE.as_ptr() as usize+KERNEL_HEAP_SIZE);
   |                                                    ^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
  --> src/mm/heap_allocator.rs:18:81
   |
18 |    unsafe { println!("heap start:{:#x},end: {:#x}",HEAP_SPACE.as_ptr() as usize,HEAP_SPACE.as_ptr() as usize+KERNEL_HEAP_SIZE);
   |                                                                                 ^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
  --> src/mm/heap_allocator.rs:22:19
   |
22 |             .init(HEAP_SPACE.as_ptr() as usize, KERNEL_HEAP_SIZE);
   |                   ^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: comparison is useless due to type limits
   --> src/syscall/fs.rs:465:8
    |
465 |     if fd < 0 || fd as usize >= fd_table_guard.len() {
    |        ^^^^^^
    |
    = note: `#[warn(unused_comparisons)]` on by default

warning: `os` (bin "os") generated 139 warnings (run `cargo fix --bin "os"` to apply 61 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.84s
[rustsbi] RustSBI version 0.2.2, adapting to RISC-V SBI v1.0.0
.______       __    __      _______.___________.  _______..______   __
|   _  \     |  |  |  |    /       |           | /       ||   _  \ |  |
|  |_)  |    |  |  |  |   |   (----`---|  |----`|   (----`|  |_)  ||  |
|      /     |  |  |  |    \   \       |  |      \   \    |   _  < |  |
|  |\  \----.|  `--'  |.----)   |      |  |  .----)   |   |  |_)  ||  |
| _| `._____| \______/ |_______/       |__|  |_______/    |______/ |__|

[rustsbi] Implementation: RustSBI-QEMU Version 0.1.1
[rustsbi-dtb] Hart count: cluster0 with 1 cores
[rustsbi] misa: RV64ACDFIMSU
[rustsbi] mideleg: ssoft, stimer, sext (0x222)
[rustsbi] medeleg: ima, ia, bkpt, la, sa, uecall, ipage, lpage, spage (0xb1ab)
[rustsbi] pmp0: 0x10000000 ..= 0x10001fff (rw-)
[rustsbi] pmp1: 0x2000000 ..= 0x200ffff (rw-)
[rustsbi] pmp2: 0xc000000 ..= 0xc3fffff (rw-)
[rustsbi] pmp3: 0x80000000 ..= 0x8fffffff (rwx)
[rustsbi] enter supervisor 0x80200000
[kernel] Hello, !
heap start:0xffffffc080393000,end: 0xffffffc082393000
Frame_allocator l:0x82395,r:0x13ffff
[32m[DEBUG] frame: 0x82395[0m
[34m[ INFO] kernel  token: 0x8000000000082395[0m
[34m[ INFO] .text [0xffffffc080200000, 0xffffffc080348000)[0m
[34m[ INFO] .rodata [0xffffffc080348000, 0xffffffc08036f000)[0m
[34m[ INFO] .data [0xffffffc08036f000, 0xffffffc080373000)[0m
[34m[ INFO] .bss [0xffffffc080373000, 0xffffffc082395000)[0m
[34m[ INFO] mapping .text section[0m
[34m[ INFO] mapping .rodata section[0m
[34m[ INFO] mapping .data section[0m
[34m[ INFO] mapping .bss section[0m
[34m[ INFO] mapping physical memory[0m
[34m[ INFO] mapping memory-mapped registers[0m
[32m[DEBUG] MMio:0xffffffc010001000,0xffffffc010002000[0m
heap_test passed!
FrameTracker:PPN=0x8299a
FrameTracker:PPN=0x8299b
FrameTracker:PPN=0x8299c
FrameTracker:PPN=0x8299d
FrameTracker:PPN=0x8299e
FrameTracker:PPN=0x8299e
FrameTracker:PPN=0x8299d
FrameTracker:PPN=0x8299c
FrameTracker:PPN=0x8299b
FrameTracker:PPN=0x8299a
frame_allocator_test passed!
[34m[ INFO] Initialize executor...[0m
[34m[ INFO] current kernel stack top:0xffffffc080800000[0m
[34m[ INFO] current kernel stack bottom:0xffffffc080400000[0m
[32m[DEBUG] [open] abs_path=/proc,flags=O_RDWR | O_CREATE | O_DIRECTORY,mode:511[0m
[32m[DEBUG] Device features: BlkFeature(SEG_MAX | GEOMETRY | BLK_SIZE | SCSI | FLUSH | TOPOLOGY | CONFIG_WCE | DISCARD | WRITE_ZEROES | NOTIFY_ON_EMPTY | RING_INDIRECT_DESC | RING_EVENT_IDX)[0m
[34m[ INFO] config: 0xffffffc010001100[0m
[34m[ INFO] found a block device of size 4194304KB[0m
[34m[ INFO] dma_alloc[0m
[34m[ INFO] Got Disk size:4294967296, position:0[0m
[34m[ INFO] New an Ext4 Block Device[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "[info]  sblock features_incompatible:\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "filetype\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "recover\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "extents\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "64bit\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "flex_bg\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "[info]  sblock features_compatible:\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "has_journal\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "ext_attr\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "resize_inode\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "dir_index\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "[info]  sblock features_read_only:\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "sparse_super\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "large_file\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "huge_file\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "dir_nlink\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "extra_isize\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "metadata_csum\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "[warn]  last umount error: superblock fs_error flag\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "Start of journal at trans id: %u\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "Descriptor block: %u, trans_id: %u\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "Block in block_tag: %lu\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "[warn]  Commit block checksum failed.Journal block: %u\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "End of journal.\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "Start of journal at trans id: %u\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "End of journal.\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "Start of journal at trans id: %u\n"[0m
[34m[ INFO] [lwext4] "%s"[0m
[34m[ INFO] [lwext4] "l: %d   "[0m
[34m[ INFO] [lwext4] "End of journal.\n"[0m
[34m[ INFO] lwext4 mount Okay[0m
[34m[ INFO] ls /                               [0m
[34m[ INFO]   [dir] .                                                                                                                                                                                                                                                              [0m
[34m[ INFO]   [dir] ..                                                                                                                                                                                                                                                             [0m
[34m[ INFO]   [dir] lost+found                                                                                                                                                                                                                                                     [0m
[34m[ INFO]   [dir] glibc                                                                                                                                                                                                                                                          [0m
[34m[ INFO]   [dir] musl                                                                                                                                                                                                                                                           [0m
[34m[ INFO]   [dir] usr                                                                                                                                                                                                                                                            [0m
[34m[ INFO]   [fil] busybox                                                                                                                                                                                                                                                        [0m
[34m[ INFO]   [dir] basic                                                                                                                                                                                                                                                          [0m
[34m[ INFO]   [fil] basic_testcode.sh                                                                                                                                                                                                                                              [0m
[34m[ INFO]   [fil] tls                                                                                                                                                                                                                                                            [0m
[34m[ INFO]   [dir] proc                                                                                                                                                                                                                                                           [0m
[34m[ INFO]   [dir] dev                                                                                                                                                                                                                                                            [0m
[34m[ INFO]   [dir] etc                                                                                                                                                                                                                                                            [0m
[34m[ INFO]   [fil] initproc.sh                                                                                                                                                                                                                                                    [0m
[34m[ INFO]   [fil] argcc.exe                                                                                                                                                                                                                                                      [0m
[34m[ INFO]   [dir] libctest                                                                                                                                                                                                                                                       [0m
[34m[ INFO] [0m
[34m[ INFO] ********************[0m
[34m[ INFO] ext4_mount_point_stats[0m
[34m[ INFO] inodes_count = 40000[0m
[34m[ INFO] free_inodes_count = 3e44d[0m
[34m[ INFO] blocks_count = 100000[0m
[34m[ INFO] free_blocks_count = 38de0[0m
[34m[ INFO] block_size = 1000[0m
[34m[ INFO] block_group_count = 20[0m
[34m[ INFO] blocks_per_group= 8000[0m
[34m[ INFO] inodes_per_group = 2000[0m
[34m[ INFO] volume_name = ""[0m
[34m[ INFO] ********************
[0m
[34m[ INFO] ********************[0m
[34m[ INFO] ext4 blockdev stats[0m
[34m[ INFO] bdev->bread_ctr = 8[0m
[34m[ INFO] bdev->bwrite_ctr = 5[0m
[34m[ INFO] bcache->ref_blocks = 3[0m
[34m[ INFO] bcache->max_ref_blocks = 3[0m
[34m[ INFO] bcache->lru_ctr = 71[0m
[34m[ INFO] ********************
[0m
[34m[ INFO] FileWrapper new EXT4_DE_DIR /[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_DIR /proc[0m
[32m[DEBUG] [open] abs_path=/proc/mounts,flags=O_RDWR | O_CREATE,mode:438[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /proc/mounts[0m
[32m[DEBUG] To write_at 0, buf len=19[0m
[32m[DEBUG] initialize cache! /proc/mounts[0m
[90m[TRACE] [write] off:19[0m
[32m[DEBUG] create /proc/mounts with 19 sizes[0m
[32m[DEBUG] [open] abs_path=/proc/meminfo,flags=O_RDWR | O_CREATE,mode:438[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /proc/meminfo[0m
[32m[DEBUG] To write_at 0, buf len=1165[0m
[32m[DEBUG] initialize cache! /proc/meminfo[0m
[90m[TRACE] [write] off:1165[0m
[32m[DEBUG] create /proc/meminfo with 1165 sizes[0m
[32m[DEBUG] [open] abs_path=/dev,flags=O_RDWR | O_CREATE | O_DIRECTORY,mode:511[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_DIR /dev[0m
[34m[ INFO] register device /dev/rtc,1[0m
[34m[ INFO] register device /dev/rtc0,2[0m
[34m[ INFO] register device /dev/tty,3[0m
[34m[ INFO] register device /dev/zero,4[0m
[34m[ INFO] register device /dev/null,5[0m
[34m[ INFO] register device /dev/cpu_dma_latency,6[0m
[32m[DEBUG] [open] abs_path=/dev/misc,flags=O_RDWR | O_CREATE | O_DIRECTORY,mode:511[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_DIR /dev/misc[0m
[34m[ INFO] register device /dev/misc/rtc,7[0m
[32m[DEBUG] [open] abs_path=/etc,flags=O_RDWR | O_CREATE | O_DIRECTORY,mode:511[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_DIR /etc[0m
[32m[DEBUG] [open] abs_path=/etc/adjtime,flags=O_RDWR | O_CREATE,mode:438[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /etc/adjtime[0m
[32m[DEBUG] To write_at 0, buf len=22[0m
[32m[DEBUG] initialize cache! /etc/adjtime[0m
[90m[TRACE] [write] off:22[0m
[32m[DEBUG] create /etc/adjtime with 22 sizes[0m
[32m[DEBUG] [open] abs_path=/etc/localtime,flags=O_RDWR | O_CREATE,mode:438[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /etc/localtime[0m
[32m[DEBUG] To write_at 0, buf len=93[0m
[32m[DEBUG] initialize cache! /etc/localtime[0m
[90m[TRACE] [write] off:93[0m
[32m[DEBUG] create /etc/localtime with 93 sizes[0m
[32m[DEBUG] [open] abs_path=/initproc.sh,flags=O_RDWR | O_CREATE,mode:493[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /initproc.sh[0m
[32m[DEBUG] To write_at 0, buf len=54[0m
[32m[DEBUG] initialize cache! /initproc.sh[0m
[90m[TRACE] [write] off:54[0m
[32m[DEBUG] [open] abs_path=/etc/passwd,flags=O_RDWR | O_CREATE,mode:438[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /etc/passwd[0m
[32m[DEBUG] To write_at 0, buf len=70[0m
[32m[DEBUG] initialize cache! /etc/passwd[0m
[90m[TRACE] [write] off:70[0m
[32m[DEBUG] create /etc/passwd with 70 sizes[0m
[32m[DEBUG] [open] abs_path=/etc/ld.so.preload,flags=O_RDWR | O_CREATE,mode:438[0m
[93m[ WARN] [map_dynamic] path=/etc/ld.so.preload[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/etc/ld.so.preload[0m
[34m[ INFO] [map_dynamic] full_path=/musl/etc/ld.so.preload[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /etc/ld.so.preload[0m
[32m[DEBUG] To write_at 0, buf len=0[0m
[32m[DEBUG] initialize cache! /etc/ld.so.preload[0m
[90m[TRACE] [write] off:0[0m
[32m[DEBUG] create /etc/ld.so.preload with 0 sizes[0m
create_init_files success!
[32m[DEBUG] Get root_dir[0m
[32m[DEBUG] [open] abs_path=/basic/pthread,flags=O_RDONLY,mode:511[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /basic/pthread[0m
[32m[DEBUG] initialize cache! /basic/pthread[0m
[32m[DEBUG] [load_dl] encounter a dl elf[0m
[32m[DEBUG] [load_dl] interp /lib/ld-linux-riscv64-lp64d.so.1[0m
[93m[ WARN] [map_dynamic] path=/lib/ld-linux-riscv64-lp64d.so.1[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/lib/ld-linux-riscv64-lp64d.so.1[0m
[32m[DEBUG] [open] abs_path=/glibc/lib/ld-linux-riscv64-lp64d.so.1,flags=O_RDONLY,mode:0[0m
[93m[ WARN] [map_dynamic] path=/glibc/lib/ld-linux-riscv64-lp64d.so.1[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /glibc/lib/ld-linux-riscv64-lp64d.so.1[0m
[32m[DEBUG] initialize cache! /glibc/lib/ld-linux-riscv64-lp64d.so.1[0m
[34m[ INFO] [map_elf_load] segment 1: file_offset=0x0, mem_size=0x1dd40, start_va=0x1500000000, end_va=0x150001dd40[0m
[34m[ INFO] [map_elf_load] segment 2: file_offset=0x1ec28, mem_size=0x2670, start_va=0x150001fc28, end_va=0x1500022298[0m
[34m[ INFO] [map_elf_load] segment 3: file_offset=0x0, mem_size=0xcd4, start_va=0x0, end_va=0xcd4[0m
[34m[ INFO] [map_elf_load] segment 4: file_offset=0xde8, mem_size=0x2c0, start_va=0x1de8, end_va=0x20a8[0m
[90m[TRACE] user_heap_sp,start_va::0x4000, sp,end_va::0x4000[0m
[90m[TRACE] app_entry:0x15000115a4[0m
[90m[TRACE] appenter:0x15000115a4[0m
[90m[TRACE] [alloc_user_stack]user_stack_top:0x2fff448000,bottom:0x2ffea48000[0m
[90m[TRACE] add_initproc ok[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] into user_task_top[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000115a4, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500014d9e, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 214 tid = 1,pid=1,sepc:0x1500014d9e[0m
[90m[TRACE] [sys_brk] new_brk_addr:0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:16384[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015b54, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 160 tid = 1,pid=1,sepc:0x1500015b54[0m
[90m[TRACE] [sys_uname],buf:0x0000002fff447680[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015788, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 48 tid = 1,pid=1,sepc:0x1500015788[0m
[90m[TRACE] [sys_faccessat] dirfd: -100, path_ptr: /etc/ld.so.preload, mode: 4, flags: 0[0m
[90m[TRACE] resolve_path_from_fd: dirfd=-100, path='/etc/ld.so.preload', follow_last=false[0m
[90m[TRACE] [find_inode] abs_path=/etc/ld.so.preload[0m
[93m[ WARN] [map_dynamic] path=/etc/ld.so.preload[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/etc/ld.so.preload[0m
[34m[ INFO] [map_dynamic] full_path=/musl/etc/ld.so.preload[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /etc/ld.so.preload[0m
[90m[TRACE] [find_inode] abs_path=/etc[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_DIR /etc[0m
[32m[DEBUG] Drop struct FileWrapper "/etc"[0m
[32m[DEBUG] Drop struct FileWrapper "/etc/ld.so.preload"[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150001578c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/etc/ld.so.preload,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/etc/ld.so.preload[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/etc/ld.so.preload[0m
[34m[ INFO] [map_dynamic] full_path=/musl/etc/ld.so.preload[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: 3, path: 0x1500019860, kst: 0x2fff4477c8, flags: 4096[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000157aa, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 57 tid = 1,pid=1,sepc:0x15000157aa[0m
[90m[TRACE]  [sys_close] for fd 3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff446848, iovcnt: 12[0m
         1:	
         1:	file=libc.so.6 [0];  needed by /basic/pthread [0]
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:75[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000a41a, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:75[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/lib/tls/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/lib/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/lib/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/lib/tls/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/lib/tls/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/lib/tls[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/lib/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/lib/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/lib/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/lib/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/lib/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/lib[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000156de, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/etc/ld.so.cache,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/etc/ld.so.cache[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/etc/ld.so.cache[0m
[34m[ INFO] [map_dynamic] full_path=/musl/etc/ld.so.cache[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/etc/ld.so.cache"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/lib/riscv64-linux-gnu/tls/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/lib/riscv64-linux-gnu/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/lib/riscv64-linux-gnu/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/lib/riscv64-linux-gnu/tls/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/lib/riscv64-linux-gnu/tls/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/lib/riscv64-linux-gnu/tls[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000156de, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/lib/riscv64-linux-gnu/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/lib/riscv64-linux-gnu/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/lib/riscv64-linux-gnu/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/lib/riscv64-linux-gnu/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/lib/riscv64-linux-gnu/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/lib/riscv64-linux-gnu[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/usr/lib/riscv64-linux-gnu/tls/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/usr/lib/riscv64-linux-gnu/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/usr/lib/riscv64-linux-gnu/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/usr/lib/riscv64-linux-gnu/tls/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/usr/lib/riscv64-linux-gnu/tls/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000158bc, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/usr/lib/riscv64-linux-gnu/tls[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/usr/lib/riscv64-linux-gnu/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/usr/lib/riscv64-linux-gnu/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/usr/lib/riscv64-linux-gnu/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/usr/lib/riscv64-linux-gnu/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/usr/lib/riscv64-linux-gnu/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/usr/lib/riscv64-linux-gnu[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000156de, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/usr/lib/tls/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/usr/lib/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/usr/lib/tls/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/usr/lib/tls/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [open_file] Error: File or directory not found: "/usr/lib/tls/libc.so.6"[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: -100, path: 0x2fff446b78, kst: 0x2fff446c28, flags: 0[0m
[90m[TRACE] [find_inode] abs_path=/usr/lib/tls[0m
[32m[DEBUG] Get root_dir[0m
[93m[ WARN] [93m [Syscall]Err: No such file or directory[0m[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:18446744073709551614[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158b8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 56 tid = 1,pid=1,sepc:0x15000158b8[0m
[90m[TRACE] kernel:pid[1] sys_openat[0m
[32m[DEBUG] [open] abs_path=/usr/lib/libc.so.6,flags=FD_CLOEXEC,mode:0[0m
[93m[ WARN] [map_dynamic] path=/usr/lib/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/glibc/usr/lib/libc.so.6[0m
[34m[ INFO] [map_dynamic] full_path=/musl/usr/lib/libc.so.6[0m
[32m[DEBUG] Get root_dir[0m
[34m[ INFO] FileWrapper new EXT4_DE_REG_FILE /usr/lib/libc.so.6[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000158bc, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000158f8, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 63 tid = 1,pid=1,sepc:0x15000158f8[0m
[90m[TRACE] kernel:pid[1] sys_read,fd:3[0m
[32m[DEBUG] initialize cache! /usr/lib/libc.so.6[0m
[90m[TRACE] [read] off:832[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:832[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x15000158fc, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:832[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000156da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x15000156da[0m
[90m[TRACE] [sys_fstatat] dirfd: 3, path: 0x1500019860, kst: 0x2fff446c28, flags: 4096[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff446688, iovcnt: 6[0m
         1:	file=libc.so.6 [0];  generating link map
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:53[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a0c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x1500015a0c[0m
[32m[DEBUG] [sys_mmap]: addr 0x0, len 0x132f50, fd 3, offset 0x0, flags MAP_PRIVATE | MAP_DENYWRITE, prot is PROT_READ | PROT_EXEC, map_perm R | X | U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac314000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687600640[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a60, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x1500015a60[0m
[90m[TRACE] [sys_mprotect] start:0x28ac435000,size:0x1000,flags:0x0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x1500015a64, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a0c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x1500015a0c[0m
[32m[DEBUG] [sys_mmap]: addr 0x28ac436000, len 0x5000, fd 3, offset 0x121000, flags MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, prot is PROT_READ | PROT_WRITE, map_perm R | W | U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac436000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688788480[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac43a800, sepc=0x15000166f2, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1204224[0m
[90m[TRACE] page alloc success area:0x28ac436-0x28ac43b  addr:0x28ac43a800[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688806912[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a0c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x1500015a0c[0m
[32m[DEBUG] [sys_mmap]: addr 0x28ac43b000, len 0xbf50, fd -1, offset 0x0, flags MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, prot is PROT_READ | PROT_WRITE, map_perm R | W | U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac43b000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688808960[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac438e30, sepc=0x1500006536, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1196032[0m
[90m[TRACE] page alloc success area:0x28ac436-0x28ac43b  addr:0x28ac438e30[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688808960[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac314270, sepc=0x1500006662, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:4096[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac314270[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455120[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x1500006662, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455120[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x15000157aa, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 57 tid = 1,pid=1,sepc:0x15000157aa[0m
[90m[TRACE]  [sys_close] for fd 3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff446688, iovcnt: 18[0m
         1:	  dynamic: 0x00000028ac438e30  base: 0x00000028ac314000   size: 0x0000000000132f50
         1:	    entry: 0x00000028ac33a8e4  phdr: 0x00000028ac314040  phnum:                 11
         1:	
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:203[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac331267, sepc=0x1500015e30, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:122880[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac331267[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687720039[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac332980, sepc=0x150000d988, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:126976[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac332980[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a0c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x1500015a0c[0m
[32m[DEBUG] [sys_mmap]: addr 0x0, len 0x2000, fd -1, offset 0x0, flags MAP_PRIVATE | MAP_ANONYMOUS, prot is PROT_READ | PROT_WRITE, map_perm R | W | U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac312000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687592448[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x1500015a10, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687592448[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac312140, sepc=0x150000dc5e, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac312-0x28ac314  addr:0x28ac312140[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687592448[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac313520, sepc=0x150000cadc, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac312-0x28ac314  addr:0x28ac313520[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687597856[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000d79a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 96 tid = 1,pid=1,sepc:0x150000d79a[0m
[90m[TRACE] kernel:pid[1] sys_settidaddress [0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000d7da, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 99 tid = 1,pid=1,sepc:0x150000d7da[0m
[90m[TRACE] [sys_set_robust_list] NOT IMPLEMENT[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac436038, sepc=0x150000b4fe, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1187840[0m
[90m[TRACE] page alloc success area:0x28ac436-0x28ac43b  addr:0x28ac436038[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000b4fe, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac333008, sepc=0x150000b4f6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:131072[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac333008[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac334000, sepc=0x150000b4f4, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:135168[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac334000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac335000, sepc=0x150000b4f6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:139264[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac335000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac437008, sepc=0x150000b4fe, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1191936[0m
[90m[TRACE] page alloc success area:0x28ac436-0x28ac43b  addr:0x28ac437008[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac336008, sepc=0x150000b4f6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:143360[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac336008[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac337000, sepc=0x150000b4f4, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:147456[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac337000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac338000, sepc=0x150000b4f6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:151552[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac338000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000b4f6, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac339008, sepc=0x150000b4f6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:155648[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac339008[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac4392a8, sepc=0x150000b4fe, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1200128[0m
[90m[TRACE] page alloc success area:0x28ac436-0x28ac43b  addr:0x28ac4392a8[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac3240d4, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:69632[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3240d4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194455056[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32ff89, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:114688[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32ff89[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687715209[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac315604, sepc=0x1500007a9c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:8192[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac315604[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687715209[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31794c, sepc=0x1500007ac0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:16384[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31794c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687715209[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac3296b4, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:90112[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3296b4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32c449, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:102400[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32c449[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687700041[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac3187a8, sepc=0x1500007ac0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:20480[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3187a8[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687700041[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac319a0c, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:24576[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac319a0c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32dfec, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:106496[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32dfec[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687707116[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac330521, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:118784[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac330521[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687716641[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac3169b8, sepc=0x1500007ac0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:12288[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3169b8[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687716641[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31ba7c, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:32768[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31ba7c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32b266, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:98304[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32b266[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687695462[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac3215cc, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:57344[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3215cc[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32a62c, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:94208[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32a62c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687692332[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32e340, sepc=0x1500007f7c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:110592[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32e340[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687707968[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac320924, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:53248[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac320924[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac322cf4, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:61440[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac322cf4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32339c, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:65536[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32339c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31ee24, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:45056[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31ee24[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31dfe4, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:40960[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31dfe4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac32624c, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:77824[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac32624c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31a2ac, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:28672[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31a2ac[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31fafc, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:49152[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31fafc[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac327674, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:81920[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac327674[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac33a008, sepc=0x150000b51e, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:159744[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac33a008[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac325334, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:73728[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac325334[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac31c724, sepc=0x150000b54c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:36864[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac31c724[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194406888[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a60, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x1500015a60[0m
[90m[TRACE] [sys_mprotect] start:0x28ac436000,size:0x3000,flags:0x1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a60, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x1500015a60[0m
[90m[TRACE] [sys_mprotect] start:0x1000,size:0x1000,flags:0x1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x1500015a64, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015a60, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x1500015a60[0m
[90m[TRACE] [sys_mprotect] start:0x150001f000,size:0x2000,flags:0x1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3fcf64, sepc=0x28ac3fcf64, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:954368[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3fcf64[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac344e92, sepc=0x28ac344e92, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:200704[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac344e92[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac4408b0, sepc=0x28ac3fcf8c, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac43b-0x28ac447  addr:0x28ac4408b0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac446f4e, sepc=0x28ac3fcf94, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac43b-0x28ac447  addr:0x28ac446f4e[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3c1e8e, sepc=0x28ac3c1e8e, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:712704[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3c1e8e[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c1ea0, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 261 tid = 1,pid=1,sepc:0x28ac3c1ea0[0m
[90m[TRACE] [sys_prlimit]: pid:0,resource:3,new_limit:0x0,old_limit:0x2fff447830[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c1ea4, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac43f950, sepc=0x28ac3fcff0, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac43b-0x28ac447  addr:0x28ac43f950[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac37d4ba, sepc=0x28ac37d4ba, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:434176[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac37d4ba[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3fd000, sepc=0x28ac3fd000, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:958464[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3fd000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:13[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff4477a0, iovcnt: 8[0m
         1:	
         1:	calling preinit: /basic/pthread
         1:	
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:70[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff447770, iovcnt: 8[0m
         1:	
         1:	calling init: /lib/ld-linux-riscv64-lp64d.so.1
         1:	
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:85[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x150000a41a, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:85[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff447770, iovcnt: 8[0m
         1:	
         1:	calling init: /usr/lib/libc.so.6
         1:	
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:71[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3c77da, sepc=0x28ac3c77da, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:737280[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3c77da[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac389a46, sepc=0x28ac389a46, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:483328[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac389a46[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146141801[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac4249f0, sepc=0x28ac3893d6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1118208[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac4249f0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146141808[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3893d6, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146141808[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac34b7b0, sepc=0x28ac34b7b0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:229376[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac34b7b0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194330718[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac43b1c0, sepc=0x28ac34b718, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac43b-0x28ac447  addr:0x28ac43b1c0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194330718[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac41b640, sepc=0x150000a37e, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1081344[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac41b640[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:2[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff447790, iovcnt: 8[0m
         1:	
         1:	initialize program: /basic/pthread
         1:	
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:73[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x1500015bb4, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 172 tid = 1,pid=1,sepc:0x1500015bb4[0m
[90m[TRACE] kernel: sys_getpid pid:1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x1500015bb8, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x150000a416, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 66 tid = 1,pid=1,sepc:0x150000a416[0m
[90m[TRACE] [sys_writev] fd: 2, iov_ptr: 0x2fff447790, iovcnt: 8[0m
         1:	
         1:	transferring control: /basic/pthread
         1:	
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:75[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3498bc, sepc=0x28ac3498bc, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:221184[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3498bc[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146141008[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac380884, sepc=0x28ac380884, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:446464[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac380884[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac35ba5a, sepc=0x28ac35ba5a, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:294912[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac35ba5a[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:2984[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3670b6, sepc=0x28ac3670b6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:344064[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3670b6[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688805880[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac38bcce, sepc=0x28ac38bcce, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:491520[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac38bcce[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:2984[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac38bcce, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:2984[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac37901e, sepc=0x28ac37901e, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:417792[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac37901e[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146139624[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac375cfc, sepc=0x28ac375cfc, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:401408[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac375cfc[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688805880[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac376772, sepc=0x28ac376772, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:405504[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac376772[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688805880[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3770d0, sepc=0x28ac3770d0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:409600[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3770d0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688805880[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac36d44c, sepc=0x28ac36d44c, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:368640[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac36d44c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688805880[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac36d44c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688805880[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3bdc06, sepc=0x28ac3bdc06, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:696320[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3bdc06[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3bdc3c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 79 tid = 1,pid=1,sepc:0x28ac3bdc3c[0m
[90m[TRACE] [sys_fstatat] dirfd: 1, path: 0x28ac4215f8, kst: 0x2fff447378, flags: 4096[0m
[90m[TRACE] [read] off:1105920[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac421000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3bf1a0, sepc=0x28ac3bf1a0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:704512[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3bf1a0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c1bec, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 29 tid = 1,pid=1,sepc:0x28ac3c1bec[0m
[90m[TRACE] [sys_ioctl][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac38ab02, sepc=0x28ac38ab02, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:487424[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac38ab02[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146138921[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac41733c, sepc=0x28ac38aba6, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1064960[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac41733c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146138928[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac38aba6, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146138928[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac387626, sepc=0x28ac387626, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:475136[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac387626[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:8192[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac384c8a, sepc=0x28ac384c8a, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:462848[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac384c8a[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:8192[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac34c5e0, sepc=0x28ac34c5e0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:233472[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac34c5e0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688827976[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac34c5f6, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 278 tid = 1,pid=1,sepc:0x28ac34c5f6[0m
[90m[TRACE] [sys_getrandom] buf_ptr: 0x28ac43fa48, len: 8, flags: 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:8[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3864e2, sepc=0x28ac3864e2, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:471040[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3864e2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688803120[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac385f50, sepc=0x28ac385f50, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:466944[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac385f50[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:656[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac385f50, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:656[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3c2214, sepc=0x28ac3c2214, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:716800[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3c2214[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:135168[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c21ec, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 214 tid = 1,pid=1,sepc:0x28ac3c21ec[0m
[90m[TRACE] [sys_brk] new_brk_addr:0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:16384[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c21ec, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 214 tid = 1,pid=1,sepc:0x28ac3c21ec[0m
[90m[TRACE] [sys_brk] new_brk_addr:151552[0m
[32m[DEBUG] [BRK] old=0x4000, new=0x25000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:151552[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac415a7c, sepc=0x28ac3672d0, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1056768[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac415a7c[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:13[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3672d0, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:13[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac357d52, sepc=0x28ac357d52, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:278528[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac357d52[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687593984[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(LoadPageFault), addr=0x28ac41cfcc, sepc=0x28ac357dfc, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:1085440[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac41cfcc[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140679[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3685c2, sepc=0x28ac3685c2, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:348160[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3685c2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140668[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3be246, sepc=0x28ac3be246, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:700416[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3be246[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be25a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 1,pid=1,sepc:0x28ac3be25a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Main thread: 174687593984, creating 4 threads...
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:49[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac37b864, sepc=0x28ac37b864, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:425984[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac37b864[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140920[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac37b864, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140920[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac349b5e, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 134 tid = 1,pid=1,sepc:0x28ac349b5e[0m
[32m[DEBUG] [sys_sigaction] signo: 33, act: 0x2fff4477f8, oldact: 0x0[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bd56, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bd56[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac37c3de, sepc=0x28ac37c3de, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:430080[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac37c3de[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140568[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3c5020, sepc=0x28ac3c5020, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:729088[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3c5020[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c502c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x28ac3c502c[0m
[32m[DEBUG] [sys_mmap]: addr 0x0, len 0x5000, fd -1, offset 0x0, flags MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, prot is PROT_NONE, map_perm U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac30d000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687571968[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c507c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x28ac3c507c[0m
[90m[TRACE] [sys_mprotect] start:0x28ac30e000,size:0x4000,flags:0x3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c5080, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac311410, sepc=0x28ac37bfc8, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac30e-0x28ac312  addr:0x28ac311410[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3880ae, sepc=0x28ac3880ae, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:479232[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3880ae[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:17[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac37f0ac, sepc=0x28ac37f0ac, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:442368[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac37f0ac[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194451112[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac37efa8, sepc=0x28ac37efa8, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:438272[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac37efa8[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:90194451112[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bb92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bb92[0m
[90m[TRACE] [sys_sisgprocmask][0m
[90m[TRACE] [read] off:1060864[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac416000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3c82ea, sepc=0x28ac3c82ea, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:741376[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3c82ea[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140336[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c82ea, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:206146140336[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac310930, sepc=0x28ac3c794c, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac30e-0x28ac312  addr:0x28ac310930[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688023696[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c795c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 220 tid = 1,pid=1,sepc:0x28ac3c795c[0m
[32m[DEBUG] [sys_clone] flags:CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD | CLONE_SYSVSEM | CLONE_SETTLS | CLONE_PARENT_SETTID | CLONE_CHILD_CLEARTID,user_stack:0x28ac310930,ptid:0x28ac3111d0,tls:0x28ac3118e0,ctid:0x28ac3111d0[0m
[90m[TRACE] [kernel]:clonethread pid[1] -> tid[2][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:2[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bbfc, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bbfc[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c502c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x28ac3c502c[0m
[32m[DEBUG] [sys_mmap]: addr 0x0, len 0x5000, fd -1, offset 0x0, flags MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, prot is PROT_NONE, map_perm U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac308000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687551488[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c507c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x28ac3c507c[0m
[90m[TRACE] [sys_mprotect] start:0x28ac309000,size:0x4000,flags:0x3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c5080, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 2[0m
[32m[DEBUG] into user_task_top[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b538, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 99 tid = 2,pid=1,sepc:0x28ac37b538[0m
[90m[TRACE] [sys_set_robust_list] NOT IMPLEMENT[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b580, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 2,pid=1,sepc:0x28ac37b580[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac378dfc, sepc=0x28ac378dfc, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:413696[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac378dfc[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:1[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 2,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Hello from thread 0 (tid = 174687588608)
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:41[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3c3260, sepc=0x28ac3c3260, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:720896[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3c3260[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:100000[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3a5d38, sepc=0x28ac3a5d38, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:598016[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3a5d38[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687586200[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3a2208, sepc=0x28ac3a2208, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:585728[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3a2208[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3a2208, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 2 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3a229a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 115 tid = 2,pid=1,sepc:0x28ac3a229a[0m
[90m[TRACE] [sys_clock_nanosleep]:clock_id:0,flags:0,req:0x00000028ac310798,rem:0x0000000000000000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] current task is clean without drop[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac30c410, sepc=0x28ac37bfc8, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac309-0x28ac30d  addr:0x28ac30c410[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bb92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bb92[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac30b930, sepc=0x28ac3c794c, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac309-0x28ac30d  addr:0x28ac30b930[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688023696[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c795c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 220 tid = 1,pid=1,sepc:0x28ac3c795c[0m
[32m[DEBUG] [sys_clone] flags:CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD | CLONE_SYSVSEM | CLONE_SETTLS | CLONE_PARENT_SETTID | CLONE_CHILD_CLEARTID,user_stack:0x28ac30b930,ptid:0x28ac30c1d0,tls:0x28ac30c8e0,ctid:0x28ac30c1d0[0m
[90m[TRACE] [kernel]:clonethread pid[1] -> tid[3][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c7960, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 3[0m
[32m[DEBUG] into user_task_top[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b538, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 99 tid = 3,pid=1,sepc:0x28ac37b538[0m
[90m[TRACE] [sys_set_robust_list] NOT IMPLEMENT[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b580, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 3,pid=1,sepc:0x28ac37b580[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 3,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Hello from thread 1 (tid = 174687568128)
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:41[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3a229a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 115 tid = 3,pid=1,sepc:0x28ac3a229a[0m
[90m[TRACE] [sys_clock_nanosleep]:clock_id:0,flags:0,req:0x00000028ac30b798,rem:0x0000000000000000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] current task is clean without drop[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:3[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bbfc, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bbfc[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c502c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x28ac3c502c[0m
[32m[DEBUG] [sys_mmap]: addr 0x0, len 0x5000, fd -1, offset 0x0, flags MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, prot is PROT_NONE, map_perm U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac303000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687531008[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c507c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x28ac3c507c[0m
[90m[TRACE] [sys_mprotect] start:0x28ac304000,size:0x4000,flags:0x3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c5080, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac307410, sepc=0x28ac37bfc8, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac304-0x28ac308  addr:0x28ac307410[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bb92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bb92[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac306930, sepc=0x28ac3c794c, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac304-0x28ac308  addr:0x28ac306930[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688023696[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c795c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 220 tid = 1,pid=1,sepc:0x28ac3c795c[0m
[32m[DEBUG] [sys_clone] flags:CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD | CLONE_SYSVSEM | CLONE_SETTLS | CLONE_PARENT_SETTID | CLONE_CHILD_CLEARTID,user_stack:0x28ac306930,ptid:0x28ac3071d0,tls:0x28ac3078e0,ctid:0x28ac3071d0[0m
[90m[TRACE] [kernel]:clonethread pid[1] -> tid[4][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:4[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bbfc, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bbfc[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c502c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 222 tid = 1,pid=1,sepc:0x28ac3c502c[0m
[32m[DEBUG] [sys_mmap]: addr 0x0, len 0x5000, fd -1, offset 0x0, flags MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, prot is PROT_NONE, map_perm U[0m
[32m[DEBUG] [sys_mmap]mmap ok,base:0x28ac2fe000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687510528[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c507c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 226 tid = 1,pid=1,sepc:0x28ac3c507c[0m
[90m[TRACE] [sys_mprotect] start:0x28ac2ff000,size:0x4000,flags:0x3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c5080, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 4[0m
[32m[DEBUG] into user_task_top[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b538, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 99 tid = 4,pid=1,sepc:0x28ac37b538[0m
[90m[TRACE] [sys_set_robust_list] NOT IMPLEMENT[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b580, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 4,pid=1,sepc:0x28ac37b580[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 4,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Hello from thread 2 (tid = 174687547648)
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:41[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3a229a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 115 tid = 4,pid=1,sepc:0x28ac3a229a[0m
[90m[TRACE] [sys_clock_nanosleep]:clock_id:0,flags:0,req:0x00000028ac306798,rem:0x0000000000000000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] current task is clean without drop[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac302410, sepc=0x28ac37bfc8, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac2ff-0x28ac303  addr:0x28ac302410[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bb92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bb92[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(StorePageFault), addr=0x28ac301930, sepc=0x28ac3c794c, satp=0x800000000008299c[0m
[90m[TRACE] page alloc success area:0x28ac2ff-0x28ac303  addr:0x28ac301930[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688023696[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3c794c, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174688023696[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3c795c, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 220 tid = 1,pid=1,sepc:0x28ac3c795c[0m
[32m[DEBUG] [sys_clone] flags:CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD | CLONE_SYSVSEM | CLONE_SETTLS | CLONE_PARENT_SETTID | CLONE_CHILD_CLEARTID,user_stack:0x28ac301930,ptid:0x28ac3021d0,tls:0x28ac3028e0,ctid:0x28ac3021d0[0m
[90m[TRACE] [kernel]:clonethread pid[1] -> tid[5][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:5[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37bbfc, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 1,pid=1,sepc:0x28ac37bbfc[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] current task is clean without drop[0m
[90m[TRACE] take a task tid = 5[0m
[32m[DEBUG] into user_task_top[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b538, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 99 tid = 5,pid=1,sepc:0x28ac37b538[0m
[90m[TRACE] [sys_set_robust_list] NOT IMPLEMENT[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b580, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 5,pid=1,sepc:0x28ac37b580[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac37b584, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 5 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 5[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 5,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Hello from thread 3 (tid = 174687527168)
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:41[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3a229a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 115 tid = 5,pid=1,sepc:0x28ac3a229a[0m
[90m[TRACE] [sys_clock_nanosleep]:clock_id:0,flags:0,req:0x00000028ac301798,rem:0x0000000000000000[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] current task is clean without drop[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[93m[ WARN] no tasks available in run_tasks[0m
[34m[ INFO] task wakeup   tid:2[0m
[90m[TRACE] take a task tid = 2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3a229e, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 2 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 2,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Thread 0 exiting
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:17[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3f48c2, sepc=0x28ac3f48c2, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:921600[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3f48c2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac3f48c2, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 2 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 2[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3e014e, sepc=0x28ac3e014e, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:839680[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3e014e[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(InstructionPageFault), addr=0x28ac3e5310, sepc=0x28ac3e5310, satp=0x800000000008299c[0m
[90m[TRACE] [read] off:860160[0m
[90m[TRACE] page alloc success area:0x28ac314-0x28ac435  addr:0x28ac3e5310[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b5f6, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 2,pid=1,sepc:0x28ac37b5f6[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b6a2, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 93 tid = 2,pid=1,sepc:0x28ac37b6a2[0m
[90m[TRACE] kernel:pid[1] sys_exit[0m
[32m[DEBUG] [kernel]exit pid 1,exit code:0[0m
[32m[DEBUG] [clear_child_tid]clear ctid:2[0m
[34m[ INFO] task wakeup   tid:1[0m
[32m[DEBUG] polled task res:Ready(
    0,
)[0m
[32m[DEBUG] task exit: todo, exit_code=0[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[34m[ INFO] task wakeup   tid:3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 3[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 3,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Thread 1 exiting
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:17[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b5f6, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 3,pid=1,sepc:0x28ac37b5f6[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b6a2, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 93 tid = 3,pid=1,sepc:0x28ac37b6a2[0m
[90m[TRACE] kernel:pid[1] sys_exit[0m
[32m[DEBUG] [kernel]exit pid 1,exit code:0[0m
[32m[DEBUG] [clear_child_tid]clear ctid:3[0m
[32m[DEBUG] polled task res:Ready(
    0,
)[0m
[32m[DEBUG] task exit: todo, exit_code=0[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[34m[ INFO] task wakeup   tid:4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 4,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Thread 2 exiting
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:17[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b5f6, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 4,pid=1,sepc:0x28ac37b5f6[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac37b5fa, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 4 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 4[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b6a2, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 93 tid = 4,pid=1,sepc:0x28ac37b6a2[0m
[90m[TRACE] kernel:pid[1] sys_exit[0m
[32m[DEBUG] [kernel]exit pid 1,exit code:0[0m
[32m[DEBUG] [clear_child_tid]clear ctid:4[0m
[32m[DEBUG] polled task res:Ready(
    0,
)[0m
[32m[DEBUG] task exit: todo, exit_code=0[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[34m[ INFO] task wakeup   tid:5[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 5[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac3be28a, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 64 tid = 5,pid=1,sepc:0x28ac3be28a[0m
[90m[TRACE] kernel:pid[1] sys_write,fd:1[0m
Thread 3 exiting
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:17[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b5f6, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 135 tid = 5,pid=1,sepc:0x28ac37b5f6[0m
[90m[TRACE] [sys_sisgprocmask][0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:0[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac37b6a2, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 93 tid = 5,pid=1,sepc:0x28ac37b6a2[0m
[90m[TRACE] kernel:pid[1] sys_exit[0m
[32m[DEBUG] [kernel]exit pid 1,exit code:0[0m
[32m[DEBUG] [clear_child_tid]clear ctid:5[0m
[32m[DEBUG] polled task res:Ready(
    0,
)[0m
[32m[DEBUG] task exit: todo, exit_code=0[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Interrupt(SupervisorTimer), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[90m[TRACE] [user_task_top]current 1 is to be preempted in user mode, allow true[0m
[90m[TRACE] yield_now[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] take a task tid = 1[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into user_task_top[0m
[90m[TRACE] Trap: cause=Exception(UserEnvCall), addr=0x0, sepc=0x28ac378f92, satp=0x800000000008299c[0m
[32m[DEBUG] [user_task_top]sys_call start syscall id = 98 tid = 1,pid=1,sepc:0x28ac378f92[0m
[90m[TRACE] [sys_futex] uaddr_user_ptr: 0x28ac3111d0, futex_op_full: 0x109 (265), val_or_count: 2, val2_timeout_ptr_or_num_requeue: 0x0, uaddr2_user_ptr: 0x0, bitmask_or_val3: 0xffffffff[0m
[32m[DEBUG] polled task res:Pending[0m
[90m[TRACE] [user_return]  result:174687588816[0m
[32m[DEBUG] into userQEMU: Terminated
